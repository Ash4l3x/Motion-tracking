#include "main.h"
#include <string.h>
#include <stdio.h>

UART_HandleTypeDef huart1; // Declare huart1 globally

// Replace these with your actual values
#define WIFI_SSID "Hitler's private network"
#define WIFI_PASS "@1ISnortRatPoison22"
#define SERVER_IP "192.168.0.104"
#define SERVER_PORT "12345"

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);

void sendCommand(char* cmd, char* expectedResponse);
void setupESP();
void sendSensorData(float ax, float ay, float az, float gx, float gy, float gz);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART1_UART_Init(); // Initialize USART1

    setupESP();

    float ax = 0.0, ay = 0.0, az = 0.0;
    float gx = 0.0, gy = 0.0, gz = 0.0;

    while (1) {
        // Replace these lines with actual sensor reading code
        ax = 1.0; ay = 2.0; az = 3.0;
        gx = 4.0; gy = 5.0; gz = 6.0;

        sendSensorData(ax, ay, az, gx, gy, gz);
        HAL_Delay(5000);
    }
}

void sendCommand(char* cmd, char* expectedResponse) {
    char rx_buffer[100];
    HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
    HAL_UART_Receive(&huart1, (uint8_t*)rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
    if (strstr(rx_buffer, expectedResponse) == NULL) {
        printf("Error: Expected response not received: %s\n", expectedResponse);
    }
}

void setupESP() {
    char cmd[100];

    sprintf(cmd, "AT\r\n");
	sendCommand(cmd, "OK");

    // Set ESP-07 to Station mode
    sprintf(cmd, "AT+CWMODE=1\r\n");
    sendCommand(cmd, "OK");

    // Connect to WiFi network
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", WIFI_SSID, WIFI_PASS);
    sendCommand(cmd, "WIFI CONNECTED");

    // Establish TCP connection with the server
    sprintf(cmd, "AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", SERVER_IP, SERVER_PORT);
    sendCommand(cmd, "CONNECT");
}

void sendSensorData(float ax, float ay, float az, float gx, float gy, float gz) {
    char cmd[100];
    char data[100];

    // Format the data to be sent

    // Send the length of the data first
    sprintf(cmd, "AT+CIPSEND=%d\r\n", strlen(data));
    sendCommand(cmd, ">");

    // Send the actual data
    HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
}

static void MX_GPIO_Init(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
}

void Error_Handler(void)
{
  // Add your error handling code here
}
