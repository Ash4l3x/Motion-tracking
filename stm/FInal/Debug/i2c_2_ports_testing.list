
i2c_2_ports_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c90  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004e60  08004e60  00005e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ecc  08004ecc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ecc  08004ecc  00005ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ed4  08004ed4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed4  08004ed4  00005ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ed8  08004ed8  00005ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004edc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000005c  08004f38  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004f38  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a99e  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186e  00000000  00000000  00010a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00012298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000796  00000000  00000000  00012c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002179c  00000000  00000000  000133d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3f6  00000000  00000000  00034b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb9b3  00000000  00000000  00041f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d91b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e58  00000000  00000000  0010d960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001107b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e48 	.word	0x08004e48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004e48 	.word	0x08004e48

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96a 	b.w	8000dd8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fa1f f68c 	uxth.w	r6, ip
 8000b52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b72:	f080 8112 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810f 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fa1f f38e 	uxth.w	r3, lr
 8000b86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb00 f606 	mul.w	r6, r0, r6
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba2:	f080 80fc 	bcs.w	8000d9e <__udivmoddi4+0x282>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f9 	bls.w	8000d9e <__udivmoddi4+0x282>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80f0 	bcc.w	8000dc8 <__udivmoddi4+0x2ac>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 8090 	bne.w	8000d20 <__udivmoddi4+0x204>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa1f f78c 	uxth.w	r7, ip
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1e:	fb07 f006 	mul.w	r0, r7, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cd 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c42:	fb08 4410 	mls	r4, r8, r0, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb00 f707 	mul.w	r7, r0, r7
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80b0 	bhi.w	8000dc2 <__udivmoddi4+0x2a6>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0620 	rsb	r6, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 f706 	lsr.w	r7, r2, r6
 8000c76:	431f      	orrs	r7, r3
 8000c78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c80:	ea43 030c 	orr.w	r3, r3, ip
 8000c84:	40f4      	lsrs	r4, r6
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	0c38      	lsrs	r0, r7, #16
 8000c8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c90:	fbb4 fef0 	udiv	lr, r4, r0
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	fb00 441e 	mls	r4, r0, lr, r4
 8000c9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb2:	f080 8084 	bcs.w	8000dbe <__udivmoddi4+0x2a2>
 8000cb6:	45a1      	cmp	r9, r4
 8000cb8:	f240 8081 	bls.w	8000dbe <__udivmoddi4+0x2a2>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	eba4 0409 	sub.w	r4, r4, r9
 8000cc6:	fa1f f983 	uxth.w	r9, r3
 8000cca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cce:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x1d2>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce4:	d267      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000ce6:	45a4      	cmp	ip, r4
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cf6:	eba4 040c 	sub.w	r4, r4, ip
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	d351      	bcc.n	8000da6 <__udivmoddi4+0x28a>
 8000d02:	d04e      	beq.n	8000da2 <__udivmoddi4+0x286>
 8000d04:	b155      	cbz	r5, 8000d1c <__udivmoddi4+0x200>
 8000d06:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	431e      	orrs	r6, r3
 8000d16:	40cc      	lsrs	r4, r1
 8000d18:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e750      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f103 	lsr.w	r1, r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d30:	4094      	lsls	r4, r2
 8000d32:	430c      	orrs	r4, r1
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3110 	mls	r1, r8, r0, r3
 8000d48:	0c23      	lsrs	r3, r4, #16
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f107 	mul.w	r1, r0, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x24c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d5e:	d22c      	bcs.n	8000dba <__udivmoddi4+0x29e>
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d92a      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d70:	fb08 3311 	mls	r3, r8, r1, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb01 f307 	mul.w	r3, r1, r7
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x276>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d88:	d213      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d911      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000d8e:	3902      	subs	r1, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	1ae4      	subs	r4, r4, r3
 8000d94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d98:	e739      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e6f0      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e706      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d2ae      	bcs.n	8000d04 <__udivmoddi4+0x1e8>
 8000da6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000daa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7a8      	b.n	8000d04 <__udivmoddi4+0x1e8>
 8000db2:	4631      	mov	r1, r6
 8000db4:	e7ed      	b.n	8000d92 <__udivmoddi4+0x276>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e799      	b.n	8000cee <__udivmoddi4+0x1d2>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e7d4      	b.n	8000d68 <__udivmoddi4+0x24c>
 8000dbe:	46d6      	mov	lr, sl
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dc2:	4463      	add	r3, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e74d      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	4623      	mov	r3, r4
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e70f      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e730      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <main>:
void Read_Gyroscope(I2C_HandleTypeDef *hi2c, uint16_t sensor_address, float *gyro_data);
void I2C_Scan(I2C_HandleTypeDef *i2c);
void calibrate_sensor(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart, uint16_t sensor_address);
void get_info();

int main(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
    HAL_Init();
 8000de2:	f000 fd2b 	bl	800183c <HAL_Init>
    SystemClock_Config();
 8000de6:	f000 fa49 	bl	800127c <SystemClock_Config>
    MX_GPIO_Init();
 8000dea:	f000 fb2d 	bl	8001448 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000dee:	f000 facf 	bl	8001390 <MX_I2C1_Init>
    MX_I2C2_Init();
 8000df2:	f000 fafb 	bl	80013ec <MX_I2C2_Init>
    MX_USART2_UART_Init();
 8000df6:	f000 faa1 	bl	800133c <MX_USART2_UART_Init>

    I2C_Scan(&hi2c1);
 8000dfa:	481c      	ldr	r0, [pc, #112]	@ (8000e6c <main+0x90>)
 8000dfc:	f000 f83c 	bl	8000e78 <I2C_Scan>
    HAL_Delay(200);
 8000e00:	20c8      	movs	r0, #200	@ 0xc8
 8000e02:	f000 fd8d 	bl	8001920 <HAL_Delay>
    I2C_Scan(&hi2c2);
 8000e06:	481a      	ldr	r0, [pc, #104]	@ (8000e70 <main+0x94>)
 8000e08:	f000 f836 	bl	8000e78 <I2C_Scan>
    HAL_Delay(200);
 8000e0c:	20c8      	movs	r0, #200	@ 0xc8
 8000e0e:	f000 fd87 	bl	8001920 <HAL_Delay>
    BNO055_Init(&hi2c1, BNO055_ADDRESS1);
 8000e12:	2129      	movs	r1, #41	@ 0x29
 8000e14:	4815      	ldr	r0, [pc, #84]	@ (8000e6c <main+0x90>)
 8000e16:	f000 f85b 	bl	8000ed0 <BNO055_Init>
    HAL_Delay(500);
 8000e1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e1e:	f000 fd7f 	bl	8001920 <HAL_Delay>
    BNO055_Init(&hi2c1, BNO055_ADDRESS2);
 8000e22:	2128      	movs	r1, #40	@ 0x28
 8000e24:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <main+0x90>)
 8000e26:	f000 f853 	bl	8000ed0 <BNO055_Init>
    HAL_Delay(500);
 8000e2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e2e:	f000 fd77 	bl	8001920 <HAL_Delay>
	BNO055_Init(&hi2c2, BNO055_ADDRESS1);
 8000e32:	2129      	movs	r1, #41	@ 0x29
 8000e34:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <main+0x94>)
 8000e36:	f000 f84b 	bl	8000ed0 <BNO055_Init>
    HAL_Delay(500);
 8000e3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e3e:	f000 fd6f 	bl	8001920 <HAL_Delay>
    char command;

    while (1) {
        if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <main+0x98>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0320 	and.w	r3, r3, #32
 8000e4c:	2b20      	cmp	r3, #32
 8000e4e:	d1f8      	bne.n	8000e42 <main+0x66>
            HAL_UART_Receive(&huart2, (uint8_t *)&command, 1, HAL_MAX_DELAY);
 8000e50:	1df9      	adds	r1, r7, #7
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	2201      	movs	r2, #1
 8000e58:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <main+0x98>)
 8000e5a:	f002 ff8e 	bl	8003d7a <HAL_UART_Receive>
            if (command == '2') {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b32      	cmp	r3, #50	@ 0x32
 8000e62:	d1ee      	bne.n	8000e42 <main+0x66>
                get_info();
 8000e64:	f000 f9a4 	bl	80011b0 <get_info>
        if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 8000e68:	e7eb      	b.n	8000e42 <main+0x66>
 8000e6a:	bf00      	nop
 8000e6c:	20000078 	.word	0x20000078
 8000e70:	200000cc 	.word	0x200000cc
 8000e74:	20000120 	.word	0x20000120

08000e78 <I2C_Scan>:
            }
        }
    }
}

void I2C_Scan(I2C_HandleTypeDef *i2c) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    uint8_t address;
    for (address = 1; address < 128; address++) {
 8000e80:	2301      	movs	r3, #1
 8000e82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000e86:	e017      	b.n	8000eb8 <I2C_Scan+0x40>
        if (HAL_I2C_IsDeviceReady(i2c, (address << 1), 1, 10) == HAL_OK) {
 8000e88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	b299      	uxth	r1, r3
 8000e92:	230a      	movs	r3, #10
 8000e94:	2201      	movs	r2, #1
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f001 fc50 	bl	800273c <HAL_I2C_IsDeviceReady>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d105      	bne.n	8000eae <I2C_Scan+0x36>
            char msg[32];
            sprintf(msg, "I2C device found at address:");
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4909      	ldr	r1, [pc, #36]	@ (8000ecc <I2C_Scan+0x54>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 fb2d 	bl	8004508 <siprintf>
    for (address = 1; address < 128; address++) {
 8000eae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000eb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	dae3      	bge.n	8000e88 <I2C_Scan+0x10>
        }
    }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3730      	adds	r7, #48	@ 0x30
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	08004e60 	.word	0x08004e60

08000ed0 <BNO055_Init>:


void BNO055_Init(I2C_HandleTypeDef *hi2c, uint16_t sensor_address) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af04      	add	r7, sp, #16
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
    uint8_t config_data = OPERATION_MODE_CONFIG;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef ret;

    // Set operation mode to CONFIG
    ret = HAL_I2C_Mem_Write(hi2c, sensor_address << 1, BNO055_OPR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 100);
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	b299      	uxth	r1, r3
 8000ee6:	2364      	movs	r3, #100	@ 0x64
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	f107 030e 	add.w	r3, r7, #14
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	223d      	movs	r2, #61	@ 0x3d
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f001 f8f3 	bl	80020e4 <HAL_I2C_Mem_Write>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d167      	bne.n	8000fd8 <BNO055_Init+0x108>
        // Handle write error
        return;
    }
    HAL_Delay(100);
 8000f08:	2064      	movs	r0, #100	@ 0x64
 8000f0a:	f000 fd09 	bl	8001920 <HAL_Delay>

    // Set power mode to NORMAL
    uint8_t power_mode = POWER_MODE_NORMAL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Mem_Write(hi2c, sensor_address << 1, BNO055_PWR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &power_mode, 1, 100);
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	b299      	uxth	r1, r3
 8000f18:	2364      	movs	r3, #100	@ 0x64
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	f107 030d 	add.w	r3, r7, #13
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	223e      	movs	r2, #62	@ 0x3e
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 f8da 	bl	80020e4 <HAL_I2C_Mem_Write>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d150      	bne.n	8000fdc <BNO055_Init+0x10c>
        // Handle write error
        return;
    }
    HAL_Delay(100);
 8000f3a:	2064      	movs	r0, #100	@ 0x64
 8000f3c:	f000 fcf0 	bl	8001920 <HAL_Delay>

    // Enable external crystal oscillator
    uint8_t sys_trigger = 0x80;
 8000f40:	2380      	movs	r3, #128	@ 0x80
 8000f42:	733b      	strb	r3, [r7, #12]
    ret = HAL_I2C_Mem_Write(hi2c, sensor_address << 1, BNO055_SYS_TRIGGER_ADDR, I2C_MEMADD_SIZE_8BIT, &sys_trigger, 1, 100);
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	b299      	uxth	r1, r3
 8000f4a:	2364      	movs	r3, #100	@ 0x64
 8000f4c:	9302      	str	r3, [sp, #8]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	223f      	movs	r2, #63	@ 0x3f
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f001 f8c1 	bl	80020e4 <HAL_I2C_Mem_Write>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d139      	bne.n	8000fe0 <BNO055_Init+0x110>
        // Handle write error
        return;
    }
    HAL_Delay(100);
 8000f6c:	2064      	movs	r0, #100	@ 0x64
 8000f6e:	f000 fcd7 	bl	8001920 <HAL_Delay>

    // Set units selection
    uint8_t unit_sel = UNIT_SEL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	72fb      	strb	r3, [r7, #11]
    ret = HAL_I2C_Mem_Write(hi2c, sensor_address << 1, BNO055_UNIT_SEL_ADDR, I2C_MEMADD_SIZE_8BIT, &unit_sel, 1, 100);
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	b299      	uxth	r1, r3
 8000f7c:	2364      	movs	r3, #100	@ 0x64
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	f107 030b 	add.w	r3, r7, #11
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	223b      	movs	r2, #59	@ 0x3b
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f001 f8a8 	bl	80020e4 <HAL_I2C_Mem_Write>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d122      	bne.n	8000fe4 <BNO055_Init+0x114>
        // Handle write error
        return;
    }
    HAL_Delay(100);
 8000f9e:	2064      	movs	r0, #100	@ 0x64
 8000fa0:	f000 fcbe 	bl	8001920 <HAL_Delay>

    // Set operation mode to NDOF
    config_data = OPERATION_MODE_NDOF;
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(hi2c, sensor_address << 1, BNO055_OPR_MODE_ADDR, I2C_MEMADD_SIZE_8BIT, &config_data, 1, 100);
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	b299      	uxth	r1, r3
 8000fae:	2364      	movs	r3, #100	@ 0x64
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f107 030e 	add.w	r3, r7, #14
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	223d      	movs	r2, #61	@ 0x3d
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f001 f88f 	bl	80020e4 <HAL_I2C_Mem_Write>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10b      	bne.n	8000fe8 <BNO055_Init+0x118>
        // Handle write error
        return;
    }
    HAL_Delay(100);
 8000fd0:	2064      	movs	r0, #100	@ 0x64
 8000fd2:	f000 fca5 	bl	8001920 <HAL_Delay>
 8000fd6:	e008      	b.n	8000fea <BNO055_Init+0x11a>
        return;
 8000fd8:	bf00      	nop
 8000fda:	e006      	b.n	8000fea <BNO055_Init+0x11a>
        return;
 8000fdc:	bf00      	nop
 8000fde:	e004      	b.n	8000fea <BNO055_Init+0x11a>
        return;
 8000fe0:	bf00      	nop
 8000fe2:	e002      	b.n	8000fea <BNO055_Init+0x11a>
        return;
 8000fe4:	bf00      	nop
 8000fe6:	e000      	b.n	8000fea <BNO055_Init+0x11a>
        return;
 8000fe8:	bf00      	nop
}
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <Read_Accelerometer>:


void Read_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t sensor_address, float *accel_data) {
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b08b      	sub	sp, #44	@ 0x2c
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	817b      	strh	r3, [r7, #10]
    uint8_t buffer[6];
    HAL_StatusTypeDef ret;

    ret = HAL_I2C_Mem_Read(hi2c, sensor_address << 1, BNO055_ACCEL_DATA_X_LSB_ADDR, I2C_MEMADD_SIZE_8BIT, buffer, 6, 100);
 8000ffe:	897b      	ldrh	r3, [r7, #10]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b299      	uxth	r1, r3
 8001004:	2364      	movs	r3, #100	@ 0x64
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2306      	movs	r3, #6
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2208      	movs	r2, #8
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f001 f95e 	bl	80022d8 <HAL_I2C_Mem_Read>
 800101c:	4603      	mov	r3, r0
 800101e:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK) {
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d14b      	bne.n	80010be <Read_Accelerometer+0xce>
        accel_data[0] = (int16_t)((buffer[1] << 8) | buffer[0]) / 100.0; // X-axis
 8001026:	7c7b      	ldrb	r3, [r7, #17]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	7c3b      	ldrb	r3, [r7, #16]
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21b      	sxth	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa8d 	bl	8000554 <__aeabi_i2d>
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <Read_Accelerometer+0xdc>)
 8001040:	f7ff fc1c 	bl	800087c <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fcfe 	bl	8000a4c <__aeabi_d2f>
 8001050:	4602      	mov	r2, r0
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	601a      	str	r2, [r3, #0]
        accel_data[1] = (int16_t)((buffer[3] << 8) | buffer[2]) / 100.0; // Y-axis
 8001056:	7cfb      	ldrb	r3, [r7, #19]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	7cbb      	ldrb	r3, [r7, #18]
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21b      	sxth	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa75 	bl	8000554 <__aeabi_i2d>
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <Read_Accelerometer+0xdc>)
 8001070:	f7ff fc04 	bl	800087c <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1d1c      	adds	r4, r3, #4
 8001080:	f7ff fce4 	bl	8000a4c <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	6023      	str	r3, [r4, #0]
        accel_data[2] = (int16_t)((buffer[5] << 8) | buffer[4]) / 100.0; // Z-axis
 8001088:	7d7b      	ldrb	r3, [r7, #21]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	7d3b      	ldrb	r3, [r7, #20]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa5c 	bl	8000554 <__aeabi_i2d>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <Read_Accelerometer+0xdc>)
 80010a2:	f7ff fbeb 	bl	800087c <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f103 0408 	add.w	r4, r3, #8
 80010b4:	f7ff fcca 	bl	8000a4c <__aeabi_d2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	6023      	str	r3, [r4, #0]
    } else {
        Error_Handler();
    }
}
 80010bc:	e001      	b.n	80010c2 <Read_Accelerometer+0xd2>
        Error_Handler();
 80010be:	f000 fa07 	bl	80014d0 <Error_Handler>
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd90      	pop	{r4, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40590000 	.word	0x40590000

080010d0 <Read_Gyroscope>:

void Read_Gyroscope(I2C_HandleTypeDef *hi2c, uint16_t sensor_address, float *gyro_data) {
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b08b      	sub	sp, #44	@ 0x2c
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	460b      	mov	r3, r1
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	817b      	strh	r3, [r7, #10]
    uint8_t buffer[6];
    HAL_StatusTypeDef ret;

    ret = HAL_I2C_Mem_Read(hi2c, sensor_address << 1, BNO055_GYRO_DATA_X_LSB_ADDR, I2C_MEMADD_SIZE_8BIT, buffer, 6, 100);
 80010de:	897b      	ldrh	r3, [r7, #10]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b299      	uxth	r1, r3
 80010e4:	2364      	movs	r3, #100	@ 0x64
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2306      	movs	r3, #6
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	2214      	movs	r2, #20
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f001 f8ee 	bl	80022d8 <HAL_I2C_Mem_Read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	75fb      	strb	r3, [r7, #23]
    if (ret == HAL_OK) {
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d14b      	bne.n	800119e <Read_Gyroscope+0xce>
        gyro_data[0] = (int16_t)((buffer[1] << 8) | buffer[0]) / 16.0; // X-axis
 8001106:	7c7b      	ldrb	r3, [r7, #17]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b21a      	sxth	r2, r3
 800110c:	7c3b      	ldrb	r3, [r7, #16]
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b21b      	sxth	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa1d 	bl	8000554 <__aeabi_i2d>
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b23      	ldr	r3, [pc, #140]	@ (80011ac <Read_Gyroscope+0xdc>)
 8001120:	f7ff fbac 	bl	800087c <__aeabi_ddiv>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fc8e 	bl	8000a4c <__aeabi_d2f>
 8001130:	4602      	mov	r2, r0
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
        gyro_data[1] = (int16_t)((buffer[3] << 8) | buffer[2]) / 16.0; // Y-axis
 8001136:	7cfb      	ldrb	r3, [r7, #19]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7cbb      	ldrb	r3, [r7, #18]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21b      	sxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fa05 	bl	8000554 <__aeabi_i2d>
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <Read_Gyroscope+0xdc>)
 8001150:	f7ff fb94 	bl	800087c <__aeabi_ddiv>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	1d1c      	adds	r4, r3, #4
 8001160:	f7ff fc74 	bl	8000a4c <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	6023      	str	r3, [r4, #0]
        gyro_data[2] = (int16_t)((buffer[5] << 8) | buffer[4]) / 16.0; // Z-axis
 8001168:	7d7b      	ldrb	r3, [r7, #21]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21a      	sxth	r2, r3
 800116e:	7d3b      	ldrb	r3, [r7, #20]
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b21b      	sxth	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9ec 	bl	8000554 <__aeabi_i2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <Read_Gyroscope+0xdc>)
 8001182:	f7ff fb7b 	bl	800087c <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f103 0408 	add.w	r4, r3, #8
 8001194:	f7ff fc5a 	bl	8000a4c <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	6023      	str	r3, [r4, #0]
    } else {
        Error_Handler();
    }
}
 800119c:	e001      	b.n	80011a2 <Read_Gyroscope+0xd2>
        Error_Handler();
 800119e:	f000 f997 	bl	80014d0 <Error_Handler>
}
 80011a2:	bf00      	nop
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40300000 	.word	0x40300000

080011b0 <get_info>:
    // Transmit the calibration status over UART
    HAL_UART_Transmit(huart, calib_data, 1, HAL_MAX_DELAY);
}


void get_info() {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0a4      	sub	sp, #144	@ 0x90
 80011b4:	af00      	add	r7, sp, #0
    float accel_data2[3];
    float gyro_data2[3];
    float accel_data3[3];
	float gyro_data3[3];

    Read_Accelerometer(&hi2c1, BNO055_ADDRESS1, accel_data1);
 80011b6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80011ba:	461a      	mov	r2, r3
 80011bc:	2129      	movs	r1, #41	@ 0x29
 80011be:	482c      	ldr	r0, [pc, #176]	@ (8001270 <get_info+0xc0>)
 80011c0:	f7ff ff16 	bl	8000ff0 <Read_Accelerometer>
    Read_Gyroscope(&hi2c1, BNO055_ADDRESS1, gyro_data1);
 80011c4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80011c8:	461a      	mov	r2, r3
 80011ca:	2129      	movs	r1, #41	@ 0x29
 80011cc:	4828      	ldr	r0, [pc, #160]	@ (8001270 <get_info+0xc0>)
 80011ce:	f7ff ff7f 	bl	80010d0 <Read_Gyroscope>
    Read_Accelerometer(&hi2c1, BNO055_ADDRESS2, accel_data2);
 80011d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011d6:	461a      	mov	r2, r3
 80011d8:	2128      	movs	r1, #40	@ 0x28
 80011da:	4825      	ldr	r0, [pc, #148]	@ (8001270 <get_info+0xc0>)
 80011dc:	f7ff ff08 	bl	8000ff0 <Read_Accelerometer>
    Read_Gyroscope(&hi2c1, BNO055_ADDRESS2, gyro_data2);
 80011e0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011e4:	461a      	mov	r2, r3
 80011e6:	2128      	movs	r1, #40	@ 0x28
 80011e8:	4821      	ldr	r0, [pc, #132]	@ (8001270 <get_info+0xc0>)
 80011ea:	f7ff ff71 	bl	80010d0 <Read_Gyroscope>
    Read_Accelerometer(&hi2c2, BNO055_ADDRESS1, accel_data3);
 80011ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011f2:	461a      	mov	r2, r3
 80011f4:	2129      	movs	r1, #41	@ 0x29
 80011f6:	481f      	ldr	r0, [pc, #124]	@ (8001274 <get_info+0xc4>)
 80011f8:	f7ff fefa 	bl	8000ff0 <Read_Accelerometer>
	Read_Gyroscope(&hi2c2, BNO055_ADDRESS1, gyro_data3);
 80011fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001200:	461a      	mov	r2, r3
 8001202:	2129      	movs	r1, #41	@ 0x29
 8001204:	481b      	ldr	r0, [pc, #108]	@ (8001274 <get_info+0xc4>)
 8001206:	f7ff ff63 	bl	80010d0 <Read_Gyroscope>

    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 800120a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001228:	617b      	str	r3, [r7, #20]
    		accel_data2[0], accel_data2[1], accel_data2[2], gyro_data2[0], gyro_data2[1], gyro_data2[2],
 800122a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 800122c:	61bb      	str	r3, [r7, #24]
    		accel_data2[0], accel_data2[1], accel_data2[2], gyro_data2[0], gyro_data2[1], gyro_data2[2],
 800122e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 8001230:	61fb      	str	r3, [r7, #28]
    		accel_data2[0], accel_data2[1], accel_data2[2], gyro_data2[0], gyro_data2[1], gyro_data2[2],
 8001232:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 8001234:	623b      	str	r3, [r7, #32]
    		accel_data2[0], accel_data2[1], accel_data2[2], gyro_data2[0], gyro_data2[1], gyro_data2[2],
 8001236:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24
    		accel_data2[0], accel_data2[1], accel_data2[2], gyro_data2[0], gyro_data2[1], gyro_data2[2],
 800123a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 800123c:	62bb      	str	r3, [r7, #40]	@ 0x28
    		accel_data2[0], accel_data2[1], accel_data2[2], gyro_data2[0], gyro_data2[1], gyro_data2[2],
 800123e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 8001240:	62fb      	str	r3, [r7, #44]	@ 0x2c
			accel_data3[0], accel_data3[1], accel_data3[2], gyro_data3[0], gyro_data3[1], gyro_data3[2]};
 8001242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 8001244:	633b      	str	r3, [r7, #48]	@ 0x30
			accel_data3[0], accel_data3[1], accel_data3[2], gyro_data3[0], gyro_data3[1], gyro_data3[2]};
 8001246:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 8001248:	637b      	str	r3, [r7, #52]	@ 0x34
			accel_data3[0], accel_data3[1], accel_data3[2], gyro_data3[0], gyro_data3[1], gyro_data3[2]};
 800124a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 800124c:	63bb      	str	r3, [r7, #56]	@ 0x38
			accel_data3[0], accel_data3[1], accel_data3[2], gyro_data3[0], gyro_data3[1], gyro_data3[2]};
 800124e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 8001250:	63fb      	str	r3, [r7, #60]	@ 0x3c
			accel_data3[0], accel_data3[1], accel_data3[2], gyro_data3[0], gyro_data3[1], gyro_data3[2]};
 8001252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 8001254:	643b      	str	r3, [r7, #64]	@ 0x40
			accel_data3[0], accel_data3[1], accel_data3[2], gyro_data3[0], gyro_data3[1], gyro_data3[2]};
 8001256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    float data_full[18] = {accel_data1[0], accel_data1[1], accel_data1[2], gyro_data1[0], gyro_data1[1], gyro_data1[2],
 8001258:	647b      	str	r3, [r7, #68]	@ 0x44

	HAL_UART_Transmit(&huart2, (uint8_t *)data_full, sizeof(data_full), HAL_MAX_DELAY);
 800125a:	4639      	mov	r1, r7
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	2248      	movs	r2, #72	@ 0x48
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <get_info+0xc8>)
 8001264:	f002 fcfe 	bl	8003c64 <HAL_UART_Transmit>
}
 8001268:	bf00      	nop
 800126a:	3790      	adds	r7, #144	@ 0x90
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000078 	.word	0x20000078
 8001274:	200000cc 	.word	0x200000cc
 8001278:	20000120 	.word	0x20000120

0800127c <SystemClock_Config>:

void SystemClock_Config(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	@ 0x50
 8001280:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2234      	movs	r2, #52	@ 0x34
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f003 f95c 	bl	8004548 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <SystemClock_Config+0xb8>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	4a22      	ldr	r2, [pc, #136]	@ (8001334 <SystemClock_Config+0xb8>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b0:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <SystemClock_Config+0xb8>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012bc:	2300      	movs	r3, #0
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <SystemClock_Config+0xbc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <SystemClock_Config+0xbc>)
 80012ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <SystemClock_Config+0xbc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012dc:	2302      	movs	r3, #2
 80012de:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e0:	2301      	movs	r3, #1
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e4:	2310      	movs	r3, #16
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 f9c9 	bl	8003688 <HAL_RCC_OscConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0x84>
        Error_Handler();
 80012fc:	f000 f8e8 	bl	80014d0 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001300:	230f      	movs	r3, #15
 8001302:	60bb      	str	r3, [r7, #8]
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fef0 	bl	8003100 <HAL_RCC_ClockConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0xae>
        Error_Handler();
 8001326:	f000 f8d3 	bl	80014d0 <Error_Handler>
    }
}
 800132a:	bf00      	nop
 800132c:	3750      	adds	r7, #80	@ 0x50
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40007000 	.word	0x40007000

0800133c <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <MX_USART2_UART_Init+0x50>)
 8001344:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 460800;
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001348:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 800134c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_USART2_UART_Init+0x4c>)
 8001374:	f002 fc26 	bl	8003bc4 <HAL_UART_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 800137e:	f000 f8a7 	bl	80014d0 <Error_Handler>
    }
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000120 	.word	0x20000120
 800138c:	40004400 	.word	0x40004400

08001390 <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_I2C1_Init+0x50>)
 8001396:	4a13      	ldr	r2, [pc, #76]	@ (80013e4 <MX_I2C1_Init+0x54>)
 8001398:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 200000;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_I2C1_Init+0x50>)
 800139c:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <MX_I2C1_Init+0x58>)
 800139e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013b2:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013ce:	f000 fd45 	bl	8001e5c <HAL_I2C_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_I2C1_Init+0x4c>
        Error_Handler();
 80013d8:	f000 f87a 	bl	80014d0 <Error_Handler>
    }
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000078 	.word	0x20000078
 80013e4:	40005400 	.word	0x40005400
 80013e8:	00030d40 	.word	0x00030d40

080013ec <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	  hi2c2.Instance = I2C2;
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_I2C2_Init+0x50>)
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <MX_I2C2_Init+0x54>)
 80013f4:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.ClockSpeed = 200000;
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_I2C2_Init+0x50>)
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <MX_I2C2_Init+0x58>)
 80013fa:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_I2C2_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.OwnAddress1 = 0;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_I2C2_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_I2C2_Init+0x50>)
 800140a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800140e:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_I2C2_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2 = 0;
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_I2C2_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <MX_I2C2_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_I2C2_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_I2C2_Init+0x50>)
 800142a:	f000 fd17 	bl	8001e5c <HAL_I2C_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C2_Init+0x4c>
	  {
		Error_Handler();
 8001434:	f000 f84c 	bl	80014d0 <Error_Handler>
	  }
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200000cc 	.word	0x200000cc
 8001440:	40005800 	.word	0x40005800
 8001444:	00030d40 	.word	0x00030d40

08001448 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <MX_GPIO_Init+0x84>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a1d      	ldr	r2, [pc, #116]	@ (80014cc <MX_GPIO_Init+0x84>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_GPIO_Init+0x84>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <MX_GPIO_Init+0x84>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a16      	ldr	r2, [pc, #88]	@ (80014cc <MX_GPIO_Init+0x84>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_GPIO_Init+0x84>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <MX_GPIO_Init+0x84>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a0f      	ldr	r2, [pc, #60]	@ (80014cc <MX_GPIO_Init+0x84>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <MX_GPIO_Init+0x84>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <MX_GPIO_Init+0x84>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <MX_GPIO_Init+0x84>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <MX_GPIO_Init+0x84>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800

080014d0 <Error_Handler>:

void Error_Handler(void) {
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
    __disable_irq();
    while (1) {
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <Error_Handler+0x8>

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001528 <HAL_MspInit+0x4c>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <HAL_MspInit+0x4c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	@ 0x40
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	@ 0x30
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a42      	ldr	r2, [pc, #264]	@ (8001654 <HAL_I2C_MspInit+0x128>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12c      	bne.n	80015a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	4b41      	ldr	r3, [pc, #260]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a40      	ldr	r2, [pc, #256]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b3e      	ldr	r3, [pc, #248]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800156a:	23c0      	movs	r3, #192	@ 0xc0
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156e:	2312      	movs	r3, #18
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800157a:	2304      	movs	r3, #4
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4835      	ldr	r0, [pc, #212]	@ (800165c <HAL_I2C_MspInit+0x130>)
 8001586:	f000 fad5 	bl	8001b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	4b32      	ldr	r3, [pc, #200]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a31      	ldr	r2, [pc, #196]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 8001594:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b2f      	ldr	r3, [pc, #188]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015a6:	e050      	b.n	800164a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2c      	ldr	r2, [pc, #176]	@ (8001660 <HAL_I2C_MspInit+0x134>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d14b      	bne.n	800164a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b28      	ldr	r3, [pc, #160]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a27      	ldr	r2, [pc, #156]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b25      	ldr	r3, [pc, #148]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a20      	ldr	r2, [pc, #128]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f0:	2312      	movs	r3, #18
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015fc:	2304      	movs	r3, #4
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4815      	ldr	r0, [pc, #84]	@ (800165c <HAL_I2C_MspInit+0x130>)
 8001608:	f000 fa94 	bl	8001b34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800160c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001612:	2312      	movs	r3, #18
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800161e:	2304      	movs	r3, #4
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	4619      	mov	r1, r3
 8001628:	480e      	ldr	r0, [pc, #56]	@ (8001664 <HAL_I2C_MspInit+0x138>)
 800162a:	f000 fa83 	bl	8001b34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 8001638:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800163c:	6413      	str	r3, [r2, #64]	@ 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_I2C_MspInit+0x12c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
}
 800164a:	bf00      	nop
 800164c:	3730      	adds	r7, #48	@ 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40005400 	.word	0x40005400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400
 8001660:	40005800 	.word	0x40005800
 8001664:	40020800 	.word	0x40020800

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a19      	ldr	r2, [pc, #100]	@ (80016ec <HAL_UART_MspInit+0x84>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12b      	bne.n	80016e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_UART_MspInit+0x88>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <HAL_UART_MspInit+0x88>)
 8001694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_UART_MspInit+0x88>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_UART_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a10      	ldr	r2, [pc, #64]	@ (80016f0 <HAL_UART_MspInit+0x88>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_UART_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016c2:	230c      	movs	r3, #12
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d2:	2307      	movs	r3, #7
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <HAL_UART_MspInit+0x8c>)
 80016de:	f000 fa29 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	@ 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40004400 	.word	0x40004400
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <NMI_Handler+0x4>

08001700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <MemManage_Handler+0x4>

08001710 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <UsageFault_Handler+0x4>

08001720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174e:	f000 f8c7 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	@ (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	@ (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f002 fee6 	bl	8004558 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20020000 	.word	0x20020000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	20000168 	.word	0x20000168
 80017c0:	200002b8 	.word	0x200002b8

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001820 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017ec:	f7ff ffea 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	@ (8001828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	@ (8001834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001816:	f002 fea5 	bl	8004564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff fadf 	bl	8000ddc <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800182c:	08004edc 	.word	0x08004edc
  ldr r2, =_sbss
 8001830:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001834:	200002b8 	.word	0x200002b8

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	@ (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f931 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	200f      	movs	r0, #15
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fe34 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f93b 	bl	8001b1a <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f911 	bl	8001ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	2000016c 	.word	0x2000016c

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000016c 	.word	0x2000016c

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	@ (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	@ (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	@ 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	@ 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff47 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff5c 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb0 	bl	8001a88 <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e165      	b.n	8001e1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8154 	bne.w	8001e16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d005      	beq.n	8001b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d130      	bne.n	8001be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0201 	and.w	r2, r3, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d017      	beq.n	8001c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80ae 	beq.w	8001e16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001e34 <HAL_GPIO_Init+0x300>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8001e34 <HAL_GPIO_Init+0x300>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cca:	4b5a      	ldr	r3, [pc, #360]	@ (8001e34 <HAL_GPIO_Init+0x300>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a58      	ldr	r2, [pc, #352]	@ (8001e38 <HAL_GPIO_Init+0x304>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4f      	ldr	r2, [pc, #316]	@ (8001e3c <HAL_GPIO_Init+0x308>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d025      	beq.n	8001d4e <HAL_GPIO_Init+0x21a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4e      	ldr	r2, [pc, #312]	@ (8001e40 <HAL_GPIO_Init+0x30c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01f      	beq.n	8001d4a <HAL_GPIO_Init+0x216>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e44 <HAL_GPIO_Init+0x310>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4c      	ldr	r2, [pc, #304]	@ (8001e48 <HAL_GPIO_Init+0x314>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0x20e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e4c <HAL_GPIO_Init+0x318>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_Init+0x20a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4a      	ldr	r2, [pc, #296]	@ (8001e50 <HAL_GPIO_Init+0x31c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x206>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a49      	ldr	r2, [pc, #292]	@ (8001e54 <HAL_GPIO_Init+0x320>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_Init+0x202>
 8001d32:	2306      	movs	r3, #6
 8001d34:	e00c      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d36:	2307      	movs	r3, #7
 8001d38:	e00a      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d3a:	2305      	movs	r3, #5
 8001d3c:	e008      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d3e:	2304      	movs	r3, #4
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e004      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	f002 0203 	and.w	r2, r2, #3
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	4093      	lsls	r3, r2
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d60:	4935      	ldr	r1, [pc, #212]	@ (8001e38 <HAL_GPIO_Init+0x304>)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d92:	4a31      	ldr	r2, [pc, #196]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d98:	4b2f      	ldr	r3, [pc, #188]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dbc:	4a26      	ldr	r2, [pc, #152]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dc2:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dec:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e10:	4a11      	ldr	r2, [pc, #68]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	f67f ae96 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3724      	adds	r7, #36	@ 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40013800 	.word	0x40013800
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	40020400 	.word	0x40020400
 8001e44:	40020800 	.word	0x40020800
 8001e48:	40020c00 	.word	0x40020c00
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40021400 	.word	0x40021400
 8001e54:	40021800 	.word	0x40021800
 8001e58:	40013c00 	.word	0x40013c00

08001e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e12b      	b.n	80020c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fb52 	bl	800152c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2224      	movs	r2, #36	@ 0x24
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ec0:	f001 fa10 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 8001ec4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a81      	ldr	r2, [pc, #516]	@ (80020d0 <HAL_I2C_Init+0x274>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d807      	bhi.n	8001ee0 <HAL_I2C_Init+0x84>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4a80      	ldr	r2, [pc, #512]	@ (80020d4 <HAL_I2C_Init+0x278>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	bf94      	ite	ls
 8001ed8:	2301      	movls	r3, #1
 8001eda:	2300      	movhi	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	e006      	b.n	8001eee <HAL_I2C_Init+0x92>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a7d      	ldr	r2, [pc, #500]	@ (80020d8 <HAL_I2C_Init+0x27c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	bf94      	ite	ls
 8001ee8:	2301      	movls	r3, #1
 8001eea:	2300      	movhi	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0e7      	b.n	80020c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4a78      	ldr	r2, [pc, #480]	@ (80020dc <HAL_I2C_Init+0x280>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0c9b      	lsrs	r3, r3, #18
 8001f00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a6a      	ldr	r2, [pc, #424]	@ (80020d0 <HAL_I2C_Init+0x274>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d802      	bhi.n	8001f30 <HAL_I2C_Init+0xd4>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	e009      	b.n	8001f44 <HAL_I2C_Init+0xe8>
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	4a69      	ldr	r2, [pc, #420]	@ (80020e0 <HAL_I2C_Init+0x284>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	099b      	lsrs	r3, r3, #6
 8001f42:	3301      	adds	r3, #1
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	495c      	ldr	r1, [pc, #368]	@ (80020d0 <HAL_I2C_Init+0x274>)
 8001f60:	428b      	cmp	r3, r1
 8001f62:	d819      	bhi.n	8001f98 <HAL_I2C_Init+0x13c>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e59      	subs	r1, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f72:	1c59      	adds	r1, r3, #1
 8001f74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f78:	400b      	ands	r3, r1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <HAL_I2C_Init+0x138>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1e59      	subs	r1, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f92:	e051      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e04f      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d111      	bne.n	8001fc4 <HAL_I2C_Init+0x168>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e58      	subs	r0, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	440b      	add	r3, r1
 8001fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bf0c      	ite	eq
 8001fbc:	2301      	moveq	r3, #1
 8001fbe:	2300      	movne	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	e012      	b.n	8001fea <HAL_I2C_Init+0x18e>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e58      	subs	r0, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	0099      	lsls	r1, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Init+0x196>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e022      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10e      	bne.n	8002018 <HAL_I2C_Init+0x1bc>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1e58      	subs	r0, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	440b      	add	r3, r1
 8002008:	fbb0 f3f3 	udiv	r3, r0, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002016:	e00f      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e58      	subs	r0, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	0099      	lsls	r1, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002034:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	6809      	ldr	r1, [r1, #0]
 800203c:	4313      	orrs	r3, r2
 800203e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002066:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6911      	ldr	r1, [r2, #16]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68d2      	ldr	r2, [r2, #12]
 8002072:	4311      	orrs	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	430b      	orrs	r3, r1
 800207a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	000186a0 	.word	0x000186a0
 80020d4:	001e847f 	.word	0x001e847f
 80020d8:	003d08ff 	.word	0x003d08ff
 80020dc:	431bde83 	.word	0x431bde83
 80020e0:	10624dd3 	.word	0x10624dd3

080020e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	817b      	strh	r3, [r7, #10]
 80020f6:	460b      	mov	r3, r1
 80020f8:	813b      	strh	r3, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020fe:	f7ff fc03 	bl	8001908 <HAL_GetTick>
 8002102:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b20      	cmp	r3, #32
 800210e:	f040 80d9 	bne.w	80022c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2319      	movs	r3, #25
 8002118:	2201      	movs	r2, #1
 800211a:	496d      	ldr	r1, [pc, #436]	@ (80022d0 <HAL_I2C_Mem_Write+0x1ec>)
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 fdb9 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002128:	2302      	movs	r3, #2
 800212a:	e0cc      	b.n	80022c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_I2C_Mem_Write+0x56>
 8002136:	2302      	movs	r3, #2
 8002138:	e0c5      	b.n	80022c6 <HAL_I2C_Mem_Write+0x1e2>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d007      	beq.n	8002160 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800216e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2221      	movs	r2, #33	@ 0x21
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2240      	movs	r2, #64	@ 0x40
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002190:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a4d      	ldr	r2, [pc, #308]	@ (80022d4 <HAL_I2C_Mem_Write+0x1f0>)
 80021a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021a2:	88f8      	ldrh	r0, [r7, #6]
 80021a4:	893a      	ldrh	r2, [r7, #8]
 80021a6:	8979      	ldrh	r1, [r7, #10]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	4603      	mov	r3, r0
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fbf0 	bl	8002998 <I2C_RequestMemoryWrite>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d052      	beq.n	8002264 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e081      	b.n	80022c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fe7e 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00d      	beq.n	80021ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d107      	bne.n	80021ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e06b      	b.n	80022c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b04      	cmp	r3, #4
 800222a:	d11b      	bne.n	8002264 <HAL_I2C_Mem_Write+0x180>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002230:	2b00      	cmp	r3, #0
 8002232:	d017      	beq.n	8002264 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1aa      	bne.n	80021c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fe71 	bl	8002f58 <I2C_WaitOnBTFFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00d      	beq.n	8002298 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	2b04      	cmp	r3, #4
 8002282:	d107      	bne.n	8002294 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002292:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e016      	b.n	80022c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e000      	b.n	80022c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022c4:	2302      	movs	r3, #2
  }
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	00100002 	.word	0x00100002
 80022d4:	ffff0000 	.word	0xffff0000

080022d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08c      	sub	sp, #48	@ 0x30
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	4608      	mov	r0, r1
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	4603      	mov	r3, r0
 80022e8:	817b      	strh	r3, [r7, #10]
 80022ea:	460b      	mov	r3, r1
 80022ec:	813b      	strh	r3, [r7, #8]
 80022ee:	4613      	mov	r3, r2
 80022f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022f2:	f7ff fb09 	bl	8001908 <HAL_GetTick>
 80022f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b20      	cmp	r3, #32
 8002302:	f040 8214 	bne.w	800272e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2319      	movs	r3, #25
 800230c:	2201      	movs	r2, #1
 800230e:	497b      	ldr	r1, [pc, #492]	@ (80024fc <HAL_I2C_Mem_Read+0x224>)
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fcbf 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
 800231e:	e207      	b.n	8002730 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_I2C_Mem_Read+0x56>
 800232a:	2302      	movs	r3, #2
 800232c:	e200      	b.n	8002730 <HAL_I2C_Mem_Read+0x458>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d007      	beq.n	8002354 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2222      	movs	r2, #34	@ 0x22
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2240      	movs	r2, #64	@ 0x40
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002384:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a5b      	ldr	r2, [pc, #364]	@ (8002500 <HAL_I2C_Mem_Read+0x228>)
 8002394:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002396:	88f8      	ldrh	r0, [r7, #6]
 8002398:	893a      	ldrh	r2, [r7, #8]
 800239a:	8979      	ldrh	r1, [r7, #10]
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	4603      	mov	r3, r0
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fb8c 	bl	8002ac4 <I2C_RequestMemoryRead>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1bc      	b.n	8002730 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d113      	bne.n	80023e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023be:	2300      	movs	r3, #0
 80023c0:	623b      	str	r3, [r7, #32]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	623b      	str	r3, [r7, #32]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	623b      	str	r3, [r7, #32]
 80023d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e190      	b.n	8002708 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d11b      	bne.n	8002426 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e170      	b.n	8002708 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242a:	2b02      	cmp	r3, #2
 800242c:	d11b      	bne.n	8002466 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800243c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800244c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	e150      	b.n	8002708 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800247c:	e144      	b.n	8002708 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002482:	2b03      	cmp	r3, #3
 8002484:	f200 80f1 	bhi.w	800266a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248c:	2b01      	cmp	r3, #1
 800248e:	d123      	bne.n	80024d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002492:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fda7 	bl	8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e145      	b.n	8002730 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024d6:	e117      	b.n	8002708 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d14e      	bne.n	800257e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e6:	2200      	movs	r2, #0
 80024e8:	4906      	ldr	r1, [pc, #24]	@ (8002504 <HAL_I2C_Mem_Read+0x22c>)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fbd2 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e11a      	b.n	8002730 <HAL_I2C_Mem_Read+0x458>
 80024fa:	bf00      	nop
 80024fc:	00100002 	.word	0x00100002
 8002500:	ffff0000 	.word	0xffff0000
 8002504:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800257c:	e0c4      	b.n	8002708 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002584:	2200      	movs	r2, #0
 8002586:	496c      	ldr	r1, [pc, #432]	@ (8002738 <HAL_I2C_Mem_Read+0x460>)
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fb83 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0cb      	b.n	8002730 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e0:	2200      	movs	r2, #0
 80025e2:	4955      	ldr	r1, [pc, #340]	@ (8002738 <HAL_I2C_Mem_Read+0x460>)
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fb55 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e09d      	b.n	8002730 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002668:	e04e      	b.n	8002708 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800266c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fcba 	bl	8002fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e058      	b.n	8002730 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d124      	bne.n	8002708 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d107      	bne.n	80026d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f aeb6 	bne.w	800247e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
  }
}
 8002730:	4618      	mov	r0, r3
 8002732:	3728      	adds	r7, #40	@ 0x28
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	00010004 	.word	0x00010004

0800273c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	@ 0x28
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	460b      	mov	r3, r1
 800274a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7ff f8dc 	bl	8001908 <HAL_GetTick>
 8002750:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b20      	cmp	r3, #32
 8002760:	f040 8111 	bne.w	8002986 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2319      	movs	r3, #25
 800276a:	2201      	movs	r2, #1
 800276c:	4988      	ldr	r1, [pc, #544]	@ (8002990 <HAL_I2C_IsDeviceReady+0x254>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fa90 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800277a:	2302      	movs	r3, #2
 800277c:	e104      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_I2C_IsDeviceReady+0x50>
 8002788:	2302      	movs	r3, #2
 800278a:	e0fd      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d007      	beq.n	80027b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2224      	movs	r2, #36	@ 0x24
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a70      	ldr	r2, [pc, #448]	@ (8002994 <HAL_I2C_IsDeviceReady+0x258>)
 80027d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fa4e 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00d      	beq.n	800281a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800280c:	d103      	bne.n	8002816 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002814:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0b6      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800281a:	897b      	ldrh	r3, [r7, #10]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002828:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800282a:	f7ff f86d 	bl	8001908 <HAL_GetTick>
 800282e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b02      	cmp	r3, #2
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800285e:	e025      	b.n	80028ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002860:	f7ff f852 	bl	8001908 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <HAL_I2C_IsDeviceReady+0x13a>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	22a0      	movs	r2, #160	@ 0xa0
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b02      	cmp	r3, #2
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80028b6:	d005      	beq.n	80028c4 <HAL_I2C_IsDeviceReady+0x188>
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_I2C_IsDeviceReady+0x188>
 80028be:	7dbb      	ldrb	r3, [r7, #22]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0cd      	beq.n	8002860 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d129      	bne.n	800292e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2319      	movs	r3, #25
 8002906:	2201      	movs	r2, #1
 8002908:	4921      	ldr	r1, [pc, #132]	@ (8002990 <HAL_I2C_IsDeviceReady+0x254>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f9c2 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e036      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e02c      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002946:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2319      	movs	r3, #25
 800294e:	2201      	movs	r2, #1
 8002950:	490f      	ldr	r1, [pc, #60]	@ (8002990 <HAL_I2C_IsDeviceReady+0x254>)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f99e 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e012      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	3301      	adds	r3, #1
 8002966:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	f4ff af32 	bcc.w	80027d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	4618      	mov	r0, r3
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	00100002 	.word	0x00100002
 8002994:	ffff0000 	.word	0xffff0000

08002998 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	4608      	mov	r0, r1
 80029a2:	4611      	mov	r1, r2
 80029a4:	461a      	mov	r2, r3
 80029a6:	4603      	mov	r3, r0
 80029a8:	817b      	strh	r3, [r7, #10]
 80029aa:	460b      	mov	r3, r1
 80029ac:	813b      	strh	r3, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f960 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00d      	beq.n	80029f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e8:	d103      	bne.n	80029f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e05f      	b.n	8002ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	6a3a      	ldr	r2, [r7, #32]
 8002a0a:	492d      	ldr	r1, [pc, #180]	@ (8002ac0 <I2C_RequestMemoryWrite+0x128>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f9bb 	bl	8002d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e04c      	b.n	8002ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a34:	6a39      	ldr	r1, [r7, #32]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 fa46 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d107      	bne.n	8002a5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e02b      	b.n	8002ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a64:	893b      	ldrh	r3, [r7, #8]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	611a      	str	r2, [r3, #16]
 8002a6e:	e021      	b.n	8002ab4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a70:	893b      	ldrh	r3, [r7, #8]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a80:	6a39      	ldr	r1, [r7, #32]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fa20 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d107      	bne.n	8002aa6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e005      	b.n	8002ab6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aaa:	893b      	ldrh	r3, [r7, #8]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	00010002 	.word	0x00010002

08002ac4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	4608      	mov	r0, r1
 8002ace:	4611      	mov	r1, r2
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	817b      	strh	r3, [r7, #10]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	813b      	strh	r3, [r7, #8]
 8002ada:	4613      	mov	r3, r2
 8002adc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002aec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002afc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f8c2 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00d      	beq.n	8002b32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b24:	d103      	bne.n	8002b2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0aa      	b.n	8002c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b32:	897b      	ldrh	r3, [r7, #10]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	6a3a      	ldr	r2, [r7, #32]
 8002b46:	4952      	ldr	r1, [pc, #328]	@ (8002c90 <I2C_RequestMemoryRead+0x1cc>)
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f91d 	bl	8002d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e097      	b.n	8002c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b70:	6a39      	ldr	r1, [r7, #32]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f9a8 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00d      	beq.n	8002b9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d107      	bne.n	8002b96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e076      	b.n	8002c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d105      	bne.n	8002bac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba0:	893b      	ldrh	r3, [r7, #8]
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	611a      	str	r2, [r3, #16]
 8002baa:	e021      	b.n	8002bf0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bac:	893b      	ldrh	r3, [r7, #8]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bbc:	6a39      	ldr	r1, [r7, #32]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f982 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d107      	bne.n	8002be2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e050      	b.n	8002c88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002be6:	893b      	ldrh	r3, [r7, #8]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf2:	6a39      	ldr	r1, [r7, #32]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f967 	bl	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d107      	bne.n	8002c18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e035      	b.n	8002c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f82b 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c52:	d103      	bne.n	8002c5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e013      	b.n	8002c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c60:	897b      	ldrh	r3, [r7, #10]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	6a3a      	ldr	r2, [r7, #32]
 8002c74:	4906      	ldr	r1, [pc, #24]	@ (8002c90 <I2C_RequestMemoryRead+0x1cc>)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f886 	bl	8002d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	00010002 	.word	0x00010002

08002c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca4:	e048      	b.n	8002d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d044      	beq.n	8002d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7fe fe2b 	bl	8001908 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d139      	bne.n	8002d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	0c1b      	lsrs	r3, r3, #16
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d10d      	bne.n	8002cea <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf0c      	ite	eq
 8002ce0:	2301      	moveq	r3, #1
 8002ce2:	2300      	movne	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	e00c      	b.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d116      	bne.n	8002d38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e023      	b.n	8002d80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d10d      	bne.n	8002d5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	43da      	mvns	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	e00c      	b.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	43da      	mvns	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d093      	beq.n	8002ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d96:	e071      	b.n	8002e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da6:	d123      	bne.n	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	f043 0204 	orr.w	r2, r3, #4
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e067      	b.n	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df6:	d041      	beq.n	8002e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df8:	f7fe fd86 	bl	8001908 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d136      	bne.n	8002e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10c      	bne.n	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4013      	ands	r3, r2
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bf14      	ite	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	2300      	moveq	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	e00b      	b.n	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e021      	b.n	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d10c      	bne.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e00b      	b.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	bf14      	ite	ne
 8002eb2:	2301      	movne	r3, #1
 8002eb4:	2300      	moveq	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f47f af6d 	bne.w	8002d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed4:	e034      	b.n	8002f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f8e3 	bl	80030a2 <I2C_IsAcknowledgeFailed>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e034      	b.n	8002f50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d028      	beq.n	8002f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eee:	f7fe fd0b 	bl	8001908 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d11d      	bne.n	8002f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0e:	2b80      	cmp	r3, #128	@ 0x80
 8002f10:	d016      	beq.n	8002f40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e007      	b.n	8002f50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4a:	2b80      	cmp	r3, #128	@ 0x80
 8002f4c:	d1c3      	bne.n	8002ed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f64:	e034      	b.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f89b 	bl	80030a2 <I2C_IsAcknowledgeFailed>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e034      	b.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d028      	beq.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7fe fcc3 	bl	8001908 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11d      	bne.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d016      	beq.n	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e007      	b.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d1c3      	bne.n	8002f66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ff4:	e049      	b.n	800308a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b10      	cmp	r3, #16
 8003002:	d119      	bne.n	8003038 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0210 	mvn.w	r2, #16
 800300c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e030      	b.n	800309a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003038:	f7fe fc66 	bl	8001908 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	d302      	bcc.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d11d      	bne.n	800308a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003058:	2b40      	cmp	r3, #64	@ 0x40
 800305a:	d016      	beq.n	800308a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e007      	b.n	800309a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003094:	2b40      	cmp	r3, #64	@ 0x40
 8003096:	d1ae      	bne.n	8002ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b8:	d11b      	bne.n	80030f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f043 0204 	orr.w	r2, r3, #4
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0cc      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003114:	4b68      	ldr	r3, [pc, #416]	@ (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d90c      	bls.n	800313c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b65      	ldr	r3, [pc, #404]	@ (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b63      	ldr	r3, [pc, #396]	@ (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0b8      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d020      	beq.n	800318a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003154:	4b59      	ldr	r3, [pc, #356]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a58      	ldr	r2, [pc, #352]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800315e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800316c:	4b53      	ldr	r3, [pc, #332]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a52      	ldr	r2, [pc, #328]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003178:	4b50      	ldr	r3, [pc, #320]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	494d      	ldr	r1, [pc, #308]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d044      	beq.n	8003220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b47      	ldr	r3, [pc, #284]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d119      	bne.n	80031de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e07f      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d003      	beq.n	80031be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031be:	4b3f      	ldr	r3, [pc, #252]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e06f      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ce:	4b3b      	ldr	r3, [pc, #236]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e067      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031de:	4b37      	ldr	r3, [pc, #220]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f023 0203 	bic.w	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4934      	ldr	r1, [pc, #208]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f0:	f7fe fb8a 	bl	8001908 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	e00a      	b.n	800320e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f8:	f7fe fb86 	bl	8001908 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e04f      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	4b2b      	ldr	r3, [pc, #172]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 020c 	and.w	r2, r3, #12
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	429a      	cmp	r2, r3
 800321e:	d1eb      	bne.n	80031f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003220:	4b25      	ldr	r3, [pc, #148]	@ (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d20c      	bcs.n	8003248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b22      	ldr	r3, [pc, #136]	@ (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b20      	ldr	r3, [pc, #128]	@ (80032b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e032      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003254:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4916      	ldr	r1, [pc, #88]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003272:	4b12      	ldr	r3, [pc, #72]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	490e      	ldr	r1, [pc, #56]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003286:	f000 f855 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 800328a:	4602      	mov	r2, r0
 800328c:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	490a      	ldr	r1, [pc, #40]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003298:	5ccb      	ldrb	r3, [r1, r3]
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	4a09      	ldr	r2, [pc, #36]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032a2:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe faea 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023c00 	.word	0x40023c00
 80032bc:	40023800 	.word	0x40023800
 80032c0:	08004e80 	.word	0x08004e80
 80032c4:	20000000 	.word	0x20000000
 80032c8:	20000004 	.word	0x20000004

080032cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d0:	4b03      	ldr	r3, [pc, #12]	@ (80032e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000000 	.word	0x20000000

080032e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032e8:	f7ff fff0 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0a9b      	lsrs	r3, r3, #10
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4903      	ldr	r1, [pc, #12]	@ (8003308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	08004e90 	.word	0x08004e90

0800330c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003310:	f7ff ffdc 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b05      	ldr	r3, [pc, #20]	@ (800332c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	0b5b      	lsrs	r3, r3, #13
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4903      	ldr	r1, [pc, #12]	@ (8003330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	08004e90 	.word	0x08004e90

08003334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003338:	b0a6      	sub	sp, #152	@ 0x98
 800333a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335a:	4bc8      	ldr	r3, [pc, #800]	@ (800367c <HAL_RCC_GetSysClockFreq+0x348>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b0c      	cmp	r3, #12
 8003364:	f200 817e 	bhi.w	8003664 <HAL_RCC_GetSysClockFreq+0x330>
 8003368:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <HAL_RCC_GetSysClockFreq+0x3c>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	080033a5 	.word	0x080033a5
 8003374:	08003665 	.word	0x08003665
 8003378:	08003665 	.word	0x08003665
 800337c:	08003665 	.word	0x08003665
 8003380:	080033ad 	.word	0x080033ad
 8003384:	08003665 	.word	0x08003665
 8003388:	08003665 	.word	0x08003665
 800338c:	08003665 	.word	0x08003665
 8003390:	080033b5 	.word	0x080033b5
 8003394:	08003665 	.word	0x08003665
 8003398:	08003665 	.word	0x08003665
 800339c:	08003665 	.word	0x08003665
 80033a0:	0800351f 	.word	0x0800351f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033a4:	4bb6      	ldr	r3, [pc, #728]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x34c>)
 80033a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80033aa:	e15f      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ac:	4bb5      	ldr	r3, [pc, #724]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x350>)
 80033ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80033b2:	e15b      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b4:	4bb1      	ldr	r3, [pc, #708]	@ (800367c <HAL_RCC_GetSysClockFreq+0x348>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c0:	4bae      	ldr	r3, [pc, #696]	@ (800367c <HAL_RCC_GetSysClockFreq+0x348>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d031      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033cc:	4bab      	ldr	r3, [pc, #684]	@ (800367c <HAL_RCC_GetSysClockFreq+0x348>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	2200      	movs	r2, #0
 80033d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033de:	663b      	str	r3, [r7, #96]	@ 0x60
 80033e0:	2300      	movs	r3, #0
 80033e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80033e4:	4ba7      	ldr	r3, [pc, #668]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x350>)
 80033e6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80033ea:	462a      	mov	r2, r5
 80033ec:	fb03 f202 	mul.w	r2, r3, r2
 80033f0:	2300      	movs	r3, #0
 80033f2:	4621      	mov	r1, r4
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	4aa2      	ldr	r2, [pc, #648]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x350>)
 80033fc:	4621      	mov	r1, r4
 80033fe:	fba1 1202 	umull	r1, r2, r1, r2
 8003402:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003404:	460a      	mov	r2, r1
 8003406:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003408:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800340a:	4413      	add	r3, r2
 800340c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800340e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003412:	2200      	movs	r2, #0
 8003414:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003416:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003418:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800341c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003420:	f7fd fb64 	bl	8000aec <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4613      	mov	r3, r2
 800342a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800342e:	e064      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003430:	4b92      	ldr	r3, [pc, #584]	@ (800367c <HAL_RCC_GetSysClockFreq+0x348>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	099b      	lsrs	r3, r3, #6
 8003436:	2200      	movs	r2, #0
 8003438:	653b      	str	r3, [r7, #80]	@ 0x50
 800343a:	657a      	str	r2, [r7, #84]	@ 0x54
 800343c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800343e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003444:	2300      	movs	r3, #0
 8003446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003448:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800344c:	4622      	mov	r2, r4
 800344e:	462b      	mov	r3, r5
 8003450:	f04f 0000 	mov.w	r0, #0
 8003454:	f04f 0100 	mov.w	r1, #0
 8003458:	0159      	lsls	r1, r3, #5
 800345a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345e:	0150      	lsls	r0, r2, #5
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4621      	mov	r1, r4
 8003466:	1a51      	subs	r1, r2, r1
 8003468:	6139      	str	r1, [r7, #16]
 800346a:	4629      	mov	r1, r5
 800346c:	eb63 0301 	sbc.w	r3, r3, r1
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800347e:	4659      	mov	r1, fp
 8003480:	018b      	lsls	r3, r1, #6
 8003482:	4651      	mov	r1, sl
 8003484:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003488:	4651      	mov	r1, sl
 800348a:	018a      	lsls	r2, r1, #6
 800348c:	4651      	mov	r1, sl
 800348e:	ebb2 0801 	subs.w	r8, r2, r1
 8003492:	4659      	mov	r1, fp
 8003494:	eb63 0901 	sbc.w	r9, r3, r1
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ac:	4690      	mov	r8, r2
 80034ae:	4699      	mov	r9, r3
 80034b0:	4623      	mov	r3, r4
 80034b2:	eb18 0303 	adds.w	r3, r8, r3
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	462b      	mov	r3, r5
 80034ba:	eb49 0303 	adc.w	r3, r9, r3
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034cc:	4629      	mov	r1, r5
 80034ce:	028b      	lsls	r3, r1, #10
 80034d0:	4621      	mov	r1, r4
 80034d2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d6:	4621      	mov	r1, r4
 80034d8:	028a      	lsls	r2, r1, #10
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034e2:	2200      	movs	r2, #0
 80034e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80034e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80034e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034ec:	f7fd fafe 	bl	8000aec <__aeabi_uldivmod>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4613      	mov	r3, r2
 80034f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034fa:	4b60      	ldr	r3, [pc, #384]	@ (800367c <HAL_RCC_GetSysClockFreq+0x348>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	3301      	adds	r3, #1
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 800350c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003510:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800351c:	e0a6      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800351e:	4b57      	ldr	r3, [pc, #348]	@ (800367c <HAL_RCC_GetSysClockFreq+0x348>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003526:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352a:	4b54      	ldr	r3, [pc, #336]	@ (800367c <HAL_RCC_GetSysClockFreq+0x348>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d02a      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b51      	ldr	r3, [pc, #324]	@ (800367c <HAL_RCC_GetSysClockFreq+0x348>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003540:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003544:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003548:	2100      	movs	r1, #0
 800354a:	4b4e      	ldr	r3, [pc, #312]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x350>)
 800354c:	fb03 f201 	mul.w	r2, r3, r1
 8003550:	2300      	movs	r3, #0
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	4413      	add	r3, r2
 8003558:	4a4a      	ldr	r2, [pc, #296]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x350>)
 800355a:	fba0 1202 	umull	r1, r2, r0, r2
 800355e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003560:	460a      	mov	r2, r1
 8003562:	673a      	str	r2, [r7, #112]	@ 0x70
 8003564:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003566:	4413      	add	r3, r2
 8003568:	677b      	str	r3, [r7, #116]	@ 0x74
 800356a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800356e:	2200      	movs	r2, #0
 8003570:	633b      	str	r3, [r7, #48]	@ 0x30
 8003572:	637a      	str	r2, [r7, #52]	@ 0x34
 8003574:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003578:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800357c:	f7fd fab6 	bl	8000aec <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4613      	mov	r3, r2
 8003586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800358a:	e05b      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358c:	4b3b      	ldr	r3, [pc, #236]	@ (800367c <HAL_RCC_GetSysClockFreq+0x348>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	2200      	movs	r2, #0
 8003594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359e:	623b      	str	r3, [r7, #32]
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	f04f 0000 	mov.w	r0, #0
 80035b0:	f04f 0100 	mov.w	r1, #0
 80035b4:	0159      	lsls	r1, r3, #5
 80035b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ba:	0150      	lsls	r0, r2, #5
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4641      	mov	r1, r8
 80035c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80035c6:	4649      	mov	r1, r9
 80035c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035e0:	ebb2 040a 	subs.w	r4, r2, sl
 80035e4:	eb63 050b 	sbc.w	r5, r3, fp
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	00eb      	lsls	r3, r5, #3
 80035f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035f6:	00e2      	lsls	r2, r4, #3
 80035f8:	4614      	mov	r4, r2
 80035fa:	461d      	mov	r5, r3
 80035fc:	4643      	mov	r3, r8
 80035fe:	18e3      	adds	r3, r4, r3
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	464b      	mov	r3, r9
 8003604:	eb45 0303 	adc.w	r3, r5, r3
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003616:	4629      	mov	r1, r5
 8003618:	028b      	lsls	r3, r1, #10
 800361a:	4621      	mov	r1, r4
 800361c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003620:	4621      	mov	r1, r4
 8003622:	028a      	lsls	r2, r1, #10
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800362c:	2200      	movs	r2, #0
 800362e:	61bb      	str	r3, [r7, #24]
 8003630:	61fa      	str	r2, [r7, #28]
 8003632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003636:	f7fd fa59 	bl	8000aec <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4613      	mov	r3, r2
 8003640:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003644:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <HAL_RCC_GetSysClockFreq+0x348>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0f1b      	lsrs	r3, r3, #28
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8003652:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003656:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003662:	e003      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800366a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003670:	4618      	mov	r0, r3
 8003672:	3798      	adds	r7, #152	@ 0x98
 8003674:	46bd      	mov	sp, r7
 8003676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	00f42400 	.word	0x00f42400
 8003684:	017d7840 	.word	0x017d7840

08003688 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e28d      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 8083 	beq.w	80037ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036a8:	4b94      	ldr	r3, [pc, #592]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d019      	beq.n	80036e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036b4:	4b91      	ldr	r3, [pc, #580]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036c0:	4b8e      	ldr	r3, [pc, #568]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036cc:	d00c      	beq.n	80036e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4b8b      	ldr	r3, [pc, #556]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d112      	bne.n	8003700 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036da:	4b88      	ldr	r3, [pc, #544]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e6:	d10b      	bne.n	8003700 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	4b84      	ldr	r3, [pc, #528]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05b      	beq.n	80037ac <HAL_RCC_OscConfig+0x124>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d157      	bne.n	80037ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e25a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x90>
 800370a:	4b7c      	ldr	r3, [pc, #496]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a7b      	ldr	r2, [pc, #492]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e01d      	b.n	8003754 <HAL_RCC_OscConfig+0xcc>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0xb4>
 8003722:	4b76      	ldr	r3, [pc, #472]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a75      	ldr	r2, [pc, #468]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b73      	ldr	r3, [pc, #460]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a72      	ldr	r2, [pc, #456]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0xcc>
 800373c:	4b6f      	ldr	r3, [pc, #444]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a6e      	ldr	r2, [pc, #440]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 8003742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b6c      	ldr	r3, [pc, #432]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a6b      	ldr	r2, [pc, #428]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 800374e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d013      	beq.n	8003784 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fe f8d4 	bl	8001908 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe f8d0 	bl	8001908 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	@ 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e21f      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b61      	ldr	r3, [pc, #388]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0xdc>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe f8c0 	bl	8001908 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800378c:	f7fe f8bc 	bl	8001908 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	@ 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e20b      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	4b57      	ldr	r3, [pc, #348]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x104>
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d06f      	beq.n	800389a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037ba:	4b50      	ldr	r3, [pc, #320]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d017      	beq.n	80037f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037c6:	4b4d      	ldr	r3, [pc, #308]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d105      	bne.n	80037de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037d2:	4b4a      	ldr	r3, [pc, #296]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00b      	beq.n	80037f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037de:	4b47      	ldr	r3, [pc, #284]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037e6:	2b0c      	cmp	r3, #12
 80037e8:	d11c      	bne.n	8003824 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ea:	4b44      	ldr	r3, [pc, #272]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d116      	bne.n	8003824 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f6:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_RCC_OscConfig+0x186>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d001      	beq.n	800380e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e1d3      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380e:	4b3b      	ldr	r3, [pc, #236]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4937      	ldr	r1, [pc, #220]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003822:	e03a      	b.n	800389a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d020      	beq.n	800386e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800382c:	4b34      	ldr	r3, [pc, #208]	@ (8003900 <HAL_RCC_OscConfig+0x278>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fe f869 	bl	8001908 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800383a:	f7fe f865 	bl	8001908 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e1b4      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384c:	4b2b      	ldr	r3, [pc, #172]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003858:	4b28      	ldr	r3, [pc, #160]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4925      	ldr	r1, [pc, #148]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]
 800386c:	e015      	b.n	800389a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386e:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <HAL_RCC_OscConfig+0x278>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe f848 	bl	8001908 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387c:	f7fe f844 	bl	8001908 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e193      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388e:	4b1b      	ldr	r3, [pc, #108]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d036      	beq.n	8003914 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ae:	4b15      	ldr	r3, [pc, #84]	@ (8003904 <HAL_RCC_OscConfig+0x27c>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fe f828 	bl	8001908 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038bc:	f7fe f824 	bl	8001908 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e173      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ce:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <HAL_RCC_OscConfig+0x274>)
 80038d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x234>
 80038da:	e01b      	b.n	8003914 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038dc:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <HAL_RCC_OscConfig+0x27c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e2:	f7fe f811 	bl	8001908 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e8:	e00e      	b.n	8003908 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ea:	f7fe f80d 	bl	8001908 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d907      	bls.n	8003908 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e15c      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
 80038fc:	40023800 	.word	0x40023800
 8003900:	42470000 	.word	0x42470000
 8003904:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	4b8a      	ldr	r3, [pc, #552]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 800390a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1ea      	bne.n	80038ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8097 	beq.w	8003a50 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003926:	4b83      	ldr	r3, [pc, #524]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	4b7f      	ldr	r3, [pc, #508]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003940:	6413      	str	r3, [r2, #64]	@ 0x40
 8003942:	4b7c      	ldr	r3, [pc, #496]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003952:	4b79      	ldr	r3, [pc, #484]	@ (8003b38 <HAL_RCC_OscConfig+0x4b0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d118      	bne.n	8003990 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395e:	4b76      	ldr	r3, [pc, #472]	@ (8003b38 <HAL_RCC_OscConfig+0x4b0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a75      	ldr	r2, [pc, #468]	@ (8003b38 <HAL_RCC_OscConfig+0x4b0>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396a:	f7fd ffcd 	bl	8001908 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7fd ffc9 	bl	8001908 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e118      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	4b6c      	ldr	r3, [pc, #432]	@ (8003b38 <HAL_RCC_OscConfig+0x4b0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x31e>
 8003998:	4b66      	ldr	r3, [pc, #408]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399c:	4a65      	ldr	r2, [pc, #404]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a4:	e01c      	b.n	80039e0 <HAL_RCC_OscConfig+0x358>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b05      	cmp	r3, #5
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x340>
 80039ae:	4b61      	ldr	r3, [pc, #388]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	4a60      	ldr	r2, [pc, #384]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ba:	4b5e      	ldr	r3, [pc, #376]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039be:	4a5d      	ldr	r2, [pc, #372]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0x358>
 80039c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039cc:	4a59      	ldr	r2, [pc, #356]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d4:	4b57      	ldr	r3, [pc, #348]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d8:	4a56      	ldr	r2, [pc, #344]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 80039da:	f023 0304 	bic.w	r3, r3, #4
 80039de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fd ff8e 	bl	8001908 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fd ff8a 	bl	8001908 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e0d7      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a06:	4b4b      	ldr	r3, [pc, #300]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0ee      	beq.n	80039f0 <HAL_RCC_OscConfig+0x368>
 8003a12:	e014      	b.n	8003a3e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fd ff78 	bl	8001908 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fd ff74 	bl	8001908 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e0c1      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a32:	4b40      	ldr	r3, [pc, #256]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ee      	bne.n	8003a1c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d105      	bne.n	8003a50 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a44:	4b3b      	ldr	r3, [pc, #236]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	4a3a      	ldr	r2, [pc, #232]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80ad 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a5a:	4b36      	ldr	r3, [pc, #216]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d060      	beq.n	8003b28 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d145      	bne.n	8003afa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6e:	4b33      	ldr	r3, [pc, #204]	@ (8003b3c <HAL_RCC_OscConfig+0x4b4>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd ff48 	bl	8001908 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fd ff44 	bl	8001908 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e093      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	4b29      	ldr	r3, [pc, #164]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	019b      	lsls	r3, r3, #6
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	071b      	lsls	r3, r3, #28
 8003ac6:	491b      	ldr	r1, [pc, #108]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003acc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b3c <HAL_RCC_OscConfig+0x4b4>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fd ff19 	bl	8001908 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ada:	f7fd ff15 	bl	8001908 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e064      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aec:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x452>
 8003af8:	e05c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	4b10      	ldr	r3, [pc, #64]	@ (8003b3c <HAL_RCC_OscConfig+0x4b4>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd ff02 	bl	8001908 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fd fefe 	bl	8001908 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e04d      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1a:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <HAL_RCC_OscConfig+0x4ac>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x480>
 8003b26:	e045      	b.n	8003bb4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e040      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40007000 	.word	0x40007000
 8003b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b40:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc0 <HAL_RCC_OscConfig+0x538>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d030      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d129      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d122      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d119      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d10f      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d107      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800

08003bc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e042      	b.n	8003c5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd fd3c 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2224      	movs	r2, #36	@ 0x24
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa09 	bl	8004020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	@ 0x28
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d175      	bne.n	8003d70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_UART_Transmit+0x2c>
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e06e      	b.n	8003d72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2221      	movs	r2, #33	@ 0x21
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ca2:	f7fd fe31 	bl	8001908 <HAL_GetTick>
 8003ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	88fa      	ldrh	r2, [r7, #6]
 8003cac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	88fa      	ldrh	r2, [r7, #6]
 8003cb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbc:	d108      	bne.n	8003cd0 <HAL_UART_Transmit+0x6c>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e003      	b.n	8003cd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cd8:	e02e      	b.n	8003d38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2180      	movs	r1, #128	@ 0x80
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f8df 	bl	8003ea8 <UART_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e03a      	b.n	8003d72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10b      	bne.n	8003d1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	3302      	adds	r3, #2
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	e007      	b.n	8003d2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	781a      	ldrb	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	3301      	adds	r3, #1
 8003d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1cb      	bne.n	8003cda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2140      	movs	r1, #64	@ 0x40
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f8ab 	bl	8003ea8 <UART_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e006      	b.n	8003d72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e000      	b.n	8003d72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d70:	2302      	movs	r3, #2
  }
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b08a      	sub	sp, #40	@ 0x28
 8003d7e:	af02      	add	r7, sp, #8
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	603b      	str	r3, [r7, #0]
 8003d86:	4613      	mov	r3, r2
 8003d88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	f040 8081 	bne.w	8003e9e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_UART_Receive+0x2e>
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e079      	b.n	8003ea0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2222      	movs	r2, #34	@ 0x22
 8003db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dc0:	f7fd fda2 	bl	8001908 <HAL_GetTick>
 8003dc4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dda:	d108      	bne.n	8003dee <HAL_UART_Receive+0x74>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d104      	bne.n	8003dee <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	e003      	b.n	8003df6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003df6:	e047      	b.n	8003e88 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2120      	movs	r1, #32
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f850 	bl	8003ea8 <UART_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e042      	b.n	8003ea0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10c      	bne.n	8003e3a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	3302      	adds	r3, #2
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	e01f      	b.n	8003e7a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e42:	d007      	beq.n	8003e54 <HAL_UART_Receive+0xda>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_UART_Receive+0xe8>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	701a      	strb	r2, [r3, #0]
 8003e60:	e008      	b.n	8003e74 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	3301      	adds	r3, #1
 8003e78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1b2      	bne.n	8003df8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb8:	e03b      	b.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d037      	beq.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec2:	f7fd fd21 	bl	8001908 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	6a3a      	ldr	r2, [r7, #32]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e03a      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d023      	beq.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b80      	cmp	r3, #128	@ 0x80
 8003eee:	d020      	beq.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b40      	cmp	r3, #64	@ 0x40
 8003ef4:	d01d      	beq.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d116      	bne.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f81d 	bl	8003f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2208      	movs	r2, #8
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e00f      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	bf0c      	ite	eq
 8003f42:	2301      	moveq	r3, #1
 8003f44:	2300      	movne	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d0b4      	beq.n	8003eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b095      	sub	sp, #84	@ 0x54
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f82:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e5      	bne.n	8003f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3314      	adds	r3, #20
 8003f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e5      	bne.n	8003f96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d119      	bne.n	8004006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	330c      	adds	r3, #12
 8003fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f023 0310 	bic.w	r3, r3, #16
 8003fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ff2:	61ba      	str	r2, [r7, #24]
 8003ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	6979      	ldr	r1, [r7, #20]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e5      	bne.n	8003fd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004014:	bf00      	nop
 8004016:	3754      	adds	r7, #84	@ 0x54
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004024:	b0c0      	sub	sp, #256	@ 0x100
 8004026:	af00      	add	r7, sp, #0
 8004028:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	68d9      	ldr	r1, [r3, #12]
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	ea40 0301 	orr.w	r3, r0, r1
 8004048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	431a      	orrs	r2, r3
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	431a      	orrs	r2, r3
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004078:	f021 010c 	bic.w	r1, r1, #12
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004086:	430b      	orrs	r3, r1
 8004088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409a:	6999      	ldr	r1, [r3, #24]
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	ea40 0301 	orr.w	r3, r0, r1
 80040a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b8f      	ldr	r3, [pc, #572]	@ (80042ec <UART_SetConfig+0x2cc>)
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d005      	beq.n	80040c0 <UART_SetConfig+0xa0>
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b8d      	ldr	r3, [pc, #564]	@ (80042f0 <UART_SetConfig+0x2d0>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	d104      	bne.n	80040ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040c0:	f7ff f924 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 80040c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040c8:	e003      	b.n	80040d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ca:	f7ff f90b 	bl	80032e4 <HAL_RCC_GetPCLK1Freq>
 80040ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040dc:	f040 810c 	bne.w	80042f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040e4:	2200      	movs	r2, #0
 80040e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040f2:	4622      	mov	r2, r4
 80040f4:	462b      	mov	r3, r5
 80040f6:	1891      	adds	r1, r2, r2
 80040f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040fa:	415b      	adcs	r3, r3
 80040fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004102:	4621      	mov	r1, r4
 8004104:	eb12 0801 	adds.w	r8, r2, r1
 8004108:	4629      	mov	r1, r5
 800410a:	eb43 0901 	adc.w	r9, r3, r1
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800411a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800411e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004122:	4690      	mov	r8, r2
 8004124:	4699      	mov	r9, r3
 8004126:	4623      	mov	r3, r4
 8004128:	eb18 0303 	adds.w	r3, r8, r3
 800412c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004130:	462b      	mov	r3, r5
 8004132:	eb49 0303 	adc.w	r3, r9, r3
 8004136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004146:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800414a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800414e:	460b      	mov	r3, r1
 8004150:	18db      	adds	r3, r3, r3
 8004152:	653b      	str	r3, [r7, #80]	@ 0x50
 8004154:	4613      	mov	r3, r2
 8004156:	eb42 0303 	adc.w	r3, r2, r3
 800415a:	657b      	str	r3, [r7, #84]	@ 0x54
 800415c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004164:	f7fc fcc2 	bl	8000aec <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4b61      	ldr	r3, [pc, #388]	@ (80042f4 <UART_SetConfig+0x2d4>)
 800416e:	fba3 2302 	umull	r2, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	011c      	lsls	r4, r3, #4
 8004176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800417a:	2200      	movs	r2, #0
 800417c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004180:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004188:	4642      	mov	r2, r8
 800418a:	464b      	mov	r3, r9
 800418c:	1891      	adds	r1, r2, r2
 800418e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004190:	415b      	adcs	r3, r3
 8004192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004198:	4641      	mov	r1, r8
 800419a:	eb12 0a01 	adds.w	sl, r2, r1
 800419e:	4649      	mov	r1, r9
 80041a0:	eb43 0b01 	adc.w	fp, r3, r1
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b8:	4692      	mov	sl, r2
 80041ba:	469b      	mov	fp, r3
 80041bc:	4643      	mov	r3, r8
 80041be:	eb1a 0303 	adds.w	r3, sl, r3
 80041c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041c6:	464b      	mov	r3, r9
 80041c8:	eb4b 0303 	adc.w	r3, fp, r3
 80041cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041e4:	460b      	mov	r3, r1
 80041e6:	18db      	adds	r3, r3, r3
 80041e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ea:	4613      	mov	r3, r2
 80041ec:	eb42 0303 	adc.w	r3, r2, r3
 80041f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041fa:	f7fc fc77 	bl	8000aec <__aeabi_uldivmod>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4611      	mov	r1, r2
 8004204:	4b3b      	ldr	r3, [pc, #236]	@ (80042f4 <UART_SetConfig+0x2d4>)
 8004206:	fba3 2301 	umull	r2, r3, r3, r1
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2264      	movs	r2, #100	@ 0x64
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	1acb      	subs	r3, r1, r3
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800421a:	4b36      	ldr	r3, [pc, #216]	@ (80042f4 <UART_SetConfig+0x2d4>)
 800421c:	fba3 2302 	umull	r2, r3, r3, r2
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004228:	441c      	add	r4, r3
 800422a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800422e:	2200      	movs	r2, #0
 8004230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004234:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	1891      	adds	r1, r2, r2
 8004242:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004244:	415b      	adcs	r3, r3
 8004246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800424c:	4641      	mov	r1, r8
 800424e:	1851      	adds	r1, r2, r1
 8004250:	6339      	str	r1, [r7, #48]	@ 0x30
 8004252:	4649      	mov	r1, r9
 8004254:	414b      	adcs	r3, r1
 8004256:	637b      	str	r3, [r7, #52]	@ 0x34
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004264:	4659      	mov	r1, fp
 8004266:	00cb      	lsls	r3, r1, #3
 8004268:	4651      	mov	r1, sl
 800426a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426e:	4651      	mov	r1, sl
 8004270:	00ca      	lsls	r2, r1, #3
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	4603      	mov	r3, r0
 8004278:	4642      	mov	r2, r8
 800427a:	189b      	adds	r3, r3, r2
 800427c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004280:	464b      	mov	r3, r9
 8004282:	460a      	mov	r2, r1
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004298:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800429c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042a0:	460b      	mov	r3, r1
 80042a2:	18db      	adds	r3, r3, r3
 80042a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042a6:	4613      	mov	r3, r2
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042b6:	f7fc fc19 	bl	8000aec <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <UART_SetConfig+0x2d4>)
 80042c0:	fba3 1302 	umull	r1, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	2164      	movs	r1, #100	@ 0x64
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	3332      	adds	r3, #50	@ 0x32
 80042d2:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <UART_SetConfig+0x2d4>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	f003 0207 	and.w	r2, r3, #7
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4422      	add	r2, r4
 80042e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042e8:	e106      	b.n	80044f8 <UART_SetConfig+0x4d8>
 80042ea:	bf00      	nop
 80042ec:	40011000 	.word	0x40011000
 80042f0:	40011400 	.word	0x40011400
 80042f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004302:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800430a:	4642      	mov	r2, r8
 800430c:	464b      	mov	r3, r9
 800430e:	1891      	adds	r1, r2, r2
 8004310:	6239      	str	r1, [r7, #32]
 8004312:	415b      	adcs	r3, r3
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
 8004316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800431a:	4641      	mov	r1, r8
 800431c:	1854      	adds	r4, r2, r1
 800431e:	4649      	mov	r1, r9
 8004320:	eb43 0501 	adc.w	r5, r3, r1
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	00eb      	lsls	r3, r5, #3
 800432e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004332:	00e2      	lsls	r2, r4, #3
 8004334:	4614      	mov	r4, r2
 8004336:	461d      	mov	r5, r3
 8004338:	4643      	mov	r3, r8
 800433a:	18e3      	adds	r3, r4, r3
 800433c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004340:	464b      	mov	r3, r9
 8004342:	eb45 0303 	adc.w	r3, r5, r3
 8004346:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004356:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004366:	4629      	mov	r1, r5
 8004368:	008b      	lsls	r3, r1, #2
 800436a:	4621      	mov	r1, r4
 800436c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004370:	4621      	mov	r1, r4
 8004372:	008a      	lsls	r2, r1, #2
 8004374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004378:	f7fc fbb8 	bl	8000aec <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4b60      	ldr	r3, [pc, #384]	@ (8004504 <UART_SetConfig+0x4e4>)
 8004382:	fba3 2302 	umull	r2, r3, r3, r2
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	011c      	lsls	r4, r3, #4
 800438a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800438e:	2200      	movs	r2, #0
 8004390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004394:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800439c:	4642      	mov	r2, r8
 800439e:	464b      	mov	r3, r9
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	61b9      	str	r1, [r7, #24]
 80043a4:	415b      	adcs	r3, r3
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ac:	4641      	mov	r1, r8
 80043ae:	1851      	adds	r1, r2, r1
 80043b0:	6139      	str	r1, [r7, #16]
 80043b2:	4649      	mov	r1, r9
 80043b4:	414b      	adcs	r3, r1
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043c4:	4659      	mov	r1, fp
 80043c6:	00cb      	lsls	r3, r1, #3
 80043c8:	4651      	mov	r1, sl
 80043ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ce:	4651      	mov	r1, sl
 80043d0:	00ca      	lsls	r2, r1, #3
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	4642      	mov	r2, r8
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043e0:	464b      	mov	r3, r9
 80043e2:	460a      	mov	r2, r1
 80043e4:	eb42 0303 	adc.w	r3, r2, r3
 80043e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004404:	4649      	mov	r1, r9
 8004406:	008b      	lsls	r3, r1, #2
 8004408:	4641      	mov	r1, r8
 800440a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800440e:	4641      	mov	r1, r8
 8004410:	008a      	lsls	r2, r1, #2
 8004412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004416:	f7fc fb69 	bl	8000aec <__aeabi_uldivmod>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4611      	mov	r1, r2
 8004420:	4b38      	ldr	r3, [pc, #224]	@ (8004504 <UART_SetConfig+0x4e4>)
 8004422:	fba3 2301 	umull	r2, r3, r3, r1
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2264      	movs	r2, #100	@ 0x64
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	1acb      	subs	r3, r1, r3
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	3332      	adds	r3, #50	@ 0x32
 8004434:	4a33      	ldr	r2, [pc, #204]	@ (8004504 <UART_SetConfig+0x4e4>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004440:	441c      	add	r4, r3
 8004442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004446:	2200      	movs	r2, #0
 8004448:	673b      	str	r3, [r7, #112]	@ 0x70
 800444a:	677a      	str	r2, [r7, #116]	@ 0x74
 800444c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004450:	4642      	mov	r2, r8
 8004452:	464b      	mov	r3, r9
 8004454:	1891      	adds	r1, r2, r2
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	415b      	adcs	r3, r3
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004460:	4641      	mov	r1, r8
 8004462:	1851      	adds	r1, r2, r1
 8004464:	6039      	str	r1, [r7, #0]
 8004466:	4649      	mov	r1, r9
 8004468:	414b      	adcs	r3, r1
 800446a:	607b      	str	r3, [r7, #4]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004478:	4659      	mov	r1, fp
 800447a:	00cb      	lsls	r3, r1, #3
 800447c:	4651      	mov	r1, sl
 800447e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004482:	4651      	mov	r1, sl
 8004484:	00ca      	lsls	r2, r1, #3
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	4603      	mov	r3, r0
 800448c:	4642      	mov	r2, r8
 800448e:	189b      	adds	r3, r3, r2
 8004490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004492:	464b      	mov	r3, r9
 8004494:	460a      	mov	r2, r1
 8004496:	eb42 0303 	adc.w	r3, r2, r3
 800449a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80044a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044b4:	4649      	mov	r1, r9
 80044b6:	008b      	lsls	r3, r1, #2
 80044b8:	4641      	mov	r1, r8
 80044ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044be:	4641      	mov	r1, r8
 80044c0:	008a      	lsls	r2, r1, #2
 80044c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044c6:	f7fc fb11 	bl	8000aec <__aeabi_uldivmod>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004504 <UART_SetConfig+0x4e4>)
 80044d0:	fba3 1302 	umull	r1, r3, r3, r2
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	2164      	movs	r1, #100	@ 0x64
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	3332      	adds	r3, #50	@ 0x32
 80044e2:	4a08      	ldr	r2, [pc, #32]	@ (8004504 <UART_SetConfig+0x4e4>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	f003 020f 	and.w	r2, r3, #15
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4422      	add	r2, r4
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044fe:	46bd      	mov	sp, r7
 8004500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004504:	51eb851f 	.word	0x51eb851f

08004508 <siprintf>:
 8004508:	b40e      	push	{r1, r2, r3}
 800450a:	b500      	push	{lr}
 800450c:	b09c      	sub	sp, #112	@ 0x70
 800450e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004510:	9002      	str	r0, [sp, #8]
 8004512:	9006      	str	r0, [sp, #24]
 8004514:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004518:	4809      	ldr	r0, [pc, #36]	@ (8004540 <siprintf+0x38>)
 800451a:	9107      	str	r1, [sp, #28]
 800451c:	9104      	str	r1, [sp, #16]
 800451e:	4909      	ldr	r1, [pc, #36]	@ (8004544 <siprintf+0x3c>)
 8004520:	f853 2b04 	ldr.w	r2, [r3], #4
 8004524:	9105      	str	r1, [sp, #20]
 8004526:	6800      	ldr	r0, [r0, #0]
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	a902      	add	r1, sp, #8
 800452c:	f000 f994 	bl	8004858 <_svfiprintf_r>
 8004530:	9b02      	ldr	r3, [sp, #8]
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	b01c      	add	sp, #112	@ 0x70
 8004538:	f85d eb04 	ldr.w	lr, [sp], #4
 800453c:	b003      	add	sp, #12
 800453e:	4770      	bx	lr
 8004540:	2000000c 	.word	0x2000000c
 8004544:	ffff0208 	.word	0xffff0208

08004548 <memset>:
 8004548:	4402      	add	r2, r0
 800454a:	4603      	mov	r3, r0
 800454c:	4293      	cmp	r3, r2
 800454e:	d100      	bne.n	8004552 <memset+0xa>
 8004550:	4770      	bx	lr
 8004552:	f803 1b01 	strb.w	r1, [r3], #1
 8004556:	e7f9      	b.n	800454c <memset+0x4>

08004558 <__errno>:
 8004558:	4b01      	ldr	r3, [pc, #4]	@ (8004560 <__errno+0x8>)
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	2000000c 	.word	0x2000000c

08004564 <__libc_init_array>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	4d0d      	ldr	r5, [pc, #52]	@ (800459c <__libc_init_array+0x38>)
 8004568:	4c0d      	ldr	r4, [pc, #52]	@ (80045a0 <__libc_init_array+0x3c>)
 800456a:	1b64      	subs	r4, r4, r5
 800456c:	10a4      	asrs	r4, r4, #2
 800456e:	2600      	movs	r6, #0
 8004570:	42a6      	cmp	r6, r4
 8004572:	d109      	bne.n	8004588 <__libc_init_array+0x24>
 8004574:	4d0b      	ldr	r5, [pc, #44]	@ (80045a4 <__libc_init_array+0x40>)
 8004576:	4c0c      	ldr	r4, [pc, #48]	@ (80045a8 <__libc_init_array+0x44>)
 8004578:	f000 fc66 	bl	8004e48 <_init>
 800457c:	1b64      	subs	r4, r4, r5
 800457e:	10a4      	asrs	r4, r4, #2
 8004580:	2600      	movs	r6, #0
 8004582:	42a6      	cmp	r6, r4
 8004584:	d105      	bne.n	8004592 <__libc_init_array+0x2e>
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	f855 3b04 	ldr.w	r3, [r5], #4
 800458c:	4798      	blx	r3
 800458e:	3601      	adds	r6, #1
 8004590:	e7ee      	b.n	8004570 <__libc_init_array+0xc>
 8004592:	f855 3b04 	ldr.w	r3, [r5], #4
 8004596:	4798      	blx	r3
 8004598:	3601      	adds	r6, #1
 800459a:	e7f2      	b.n	8004582 <__libc_init_array+0x1e>
 800459c:	08004ed4 	.word	0x08004ed4
 80045a0:	08004ed4 	.word	0x08004ed4
 80045a4:	08004ed4 	.word	0x08004ed4
 80045a8:	08004ed8 	.word	0x08004ed8

080045ac <__retarget_lock_acquire_recursive>:
 80045ac:	4770      	bx	lr

080045ae <__retarget_lock_release_recursive>:
 80045ae:	4770      	bx	lr

080045b0 <_free_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4605      	mov	r5, r0
 80045b4:	2900      	cmp	r1, #0
 80045b6:	d041      	beq.n	800463c <_free_r+0x8c>
 80045b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045bc:	1f0c      	subs	r4, r1, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bfb8      	it	lt
 80045c2:	18e4      	addlt	r4, r4, r3
 80045c4:	f000 f8e0 	bl	8004788 <__malloc_lock>
 80045c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004640 <_free_r+0x90>)
 80045ca:	6813      	ldr	r3, [r2, #0]
 80045cc:	b933      	cbnz	r3, 80045dc <_free_r+0x2c>
 80045ce:	6063      	str	r3, [r4, #4]
 80045d0:	6014      	str	r4, [r2, #0]
 80045d2:	4628      	mov	r0, r5
 80045d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045d8:	f000 b8dc 	b.w	8004794 <__malloc_unlock>
 80045dc:	42a3      	cmp	r3, r4
 80045de:	d908      	bls.n	80045f2 <_free_r+0x42>
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	1821      	adds	r1, r4, r0
 80045e4:	428b      	cmp	r3, r1
 80045e6:	bf01      	itttt	eq
 80045e8:	6819      	ldreq	r1, [r3, #0]
 80045ea:	685b      	ldreq	r3, [r3, #4]
 80045ec:	1809      	addeq	r1, r1, r0
 80045ee:	6021      	streq	r1, [r4, #0]
 80045f0:	e7ed      	b.n	80045ce <_free_r+0x1e>
 80045f2:	461a      	mov	r2, r3
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	b10b      	cbz	r3, 80045fc <_free_r+0x4c>
 80045f8:	42a3      	cmp	r3, r4
 80045fa:	d9fa      	bls.n	80045f2 <_free_r+0x42>
 80045fc:	6811      	ldr	r1, [r2, #0]
 80045fe:	1850      	adds	r0, r2, r1
 8004600:	42a0      	cmp	r0, r4
 8004602:	d10b      	bne.n	800461c <_free_r+0x6c>
 8004604:	6820      	ldr	r0, [r4, #0]
 8004606:	4401      	add	r1, r0
 8004608:	1850      	adds	r0, r2, r1
 800460a:	4283      	cmp	r3, r0
 800460c:	6011      	str	r1, [r2, #0]
 800460e:	d1e0      	bne.n	80045d2 <_free_r+0x22>
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	6053      	str	r3, [r2, #4]
 8004616:	4408      	add	r0, r1
 8004618:	6010      	str	r0, [r2, #0]
 800461a:	e7da      	b.n	80045d2 <_free_r+0x22>
 800461c:	d902      	bls.n	8004624 <_free_r+0x74>
 800461e:	230c      	movs	r3, #12
 8004620:	602b      	str	r3, [r5, #0]
 8004622:	e7d6      	b.n	80045d2 <_free_r+0x22>
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	1821      	adds	r1, r4, r0
 8004628:	428b      	cmp	r3, r1
 800462a:	bf04      	itt	eq
 800462c:	6819      	ldreq	r1, [r3, #0]
 800462e:	685b      	ldreq	r3, [r3, #4]
 8004630:	6063      	str	r3, [r4, #4]
 8004632:	bf04      	itt	eq
 8004634:	1809      	addeq	r1, r1, r0
 8004636:	6021      	streq	r1, [r4, #0]
 8004638:	6054      	str	r4, [r2, #4]
 800463a:	e7ca      	b.n	80045d2 <_free_r+0x22>
 800463c:	bd38      	pop	{r3, r4, r5, pc}
 800463e:	bf00      	nop
 8004640:	200002b4 	.word	0x200002b4

08004644 <sbrk_aligned>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	4e0f      	ldr	r6, [pc, #60]	@ (8004684 <sbrk_aligned+0x40>)
 8004648:	460c      	mov	r4, r1
 800464a:	6831      	ldr	r1, [r6, #0]
 800464c:	4605      	mov	r5, r0
 800464e:	b911      	cbnz	r1, 8004656 <sbrk_aligned+0x12>
 8004650:	f000 fba6 	bl	8004da0 <_sbrk_r>
 8004654:	6030      	str	r0, [r6, #0]
 8004656:	4621      	mov	r1, r4
 8004658:	4628      	mov	r0, r5
 800465a:	f000 fba1 	bl	8004da0 <_sbrk_r>
 800465e:	1c43      	adds	r3, r0, #1
 8004660:	d103      	bne.n	800466a <sbrk_aligned+0x26>
 8004662:	f04f 34ff 	mov.w	r4, #4294967295
 8004666:	4620      	mov	r0, r4
 8004668:	bd70      	pop	{r4, r5, r6, pc}
 800466a:	1cc4      	adds	r4, r0, #3
 800466c:	f024 0403 	bic.w	r4, r4, #3
 8004670:	42a0      	cmp	r0, r4
 8004672:	d0f8      	beq.n	8004666 <sbrk_aligned+0x22>
 8004674:	1a21      	subs	r1, r4, r0
 8004676:	4628      	mov	r0, r5
 8004678:	f000 fb92 	bl	8004da0 <_sbrk_r>
 800467c:	3001      	adds	r0, #1
 800467e:	d1f2      	bne.n	8004666 <sbrk_aligned+0x22>
 8004680:	e7ef      	b.n	8004662 <sbrk_aligned+0x1e>
 8004682:	bf00      	nop
 8004684:	200002b0 	.word	0x200002b0

08004688 <_malloc_r>:
 8004688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800468c:	1ccd      	adds	r5, r1, #3
 800468e:	f025 0503 	bic.w	r5, r5, #3
 8004692:	3508      	adds	r5, #8
 8004694:	2d0c      	cmp	r5, #12
 8004696:	bf38      	it	cc
 8004698:	250c      	movcc	r5, #12
 800469a:	2d00      	cmp	r5, #0
 800469c:	4606      	mov	r6, r0
 800469e:	db01      	blt.n	80046a4 <_malloc_r+0x1c>
 80046a0:	42a9      	cmp	r1, r5
 80046a2:	d904      	bls.n	80046ae <_malloc_r+0x26>
 80046a4:	230c      	movs	r3, #12
 80046a6:	6033      	str	r3, [r6, #0]
 80046a8:	2000      	movs	r0, #0
 80046aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004784 <_malloc_r+0xfc>
 80046b2:	f000 f869 	bl	8004788 <__malloc_lock>
 80046b6:	f8d8 3000 	ldr.w	r3, [r8]
 80046ba:	461c      	mov	r4, r3
 80046bc:	bb44      	cbnz	r4, 8004710 <_malloc_r+0x88>
 80046be:	4629      	mov	r1, r5
 80046c0:	4630      	mov	r0, r6
 80046c2:	f7ff ffbf 	bl	8004644 <sbrk_aligned>
 80046c6:	1c43      	adds	r3, r0, #1
 80046c8:	4604      	mov	r4, r0
 80046ca:	d158      	bne.n	800477e <_malloc_r+0xf6>
 80046cc:	f8d8 4000 	ldr.w	r4, [r8]
 80046d0:	4627      	mov	r7, r4
 80046d2:	2f00      	cmp	r7, #0
 80046d4:	d143      	bne.n	800475e <_malloc_r+0xd6>
 80046d6:	2c00      	cmp	r4, #0
 80046d8:	d04b      	beq.n	8004772 <_malloc_r+0xea>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	4639      	mov	r1, r7
 80046de:	4630      	mov	r0, r6
 80046e0:	eb04 0903 	add.w	r9, r4, r3
 80046e4:	f000 fb5c 	bl	8004da0 <_sbrk_r>
 80046e8:	4581      	cmp	r9, r0
 80046ea:	d142      	bne.n	8004772 <_malloc_r+0xea>
 80046ec:	6821      	ldr	r1, [r4, #0]
 80046ee:	1a6d      	subs	r5, r5, r1
 80046f0:	4629      	mov	r1, r5
 80046f2:	4630      	mov	r0, r6
 80046f4:	f7ff ffa6 	bl	8004644 <sbrk_aligned>
 80046f8:	3001      	adds	r0, #1
 80046fa:	d03a      	beq.n	8004772 <_malloc_r+0xea>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	442b      	add	r3, r5
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	f8d8 3000 	ldr.w	r3, [r8]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	bb62      	cbnz	r2, 8004764 <_malloc_r+0xdc>
 800470a:	f8c8 7000 	str.w	r7, [r8]
 800470e:	e00f      	b.n	8004730 <_malloc_r+0xa8>
 8004710:	6822      	ldr	r2, [r4, #0]
 8004712:	1b52      	subs	r2, r2, r5
 8004714:	d420      	bmi.n	8004758 <_malloc_r+0xd0>
 8004716:	2a0b      	cmp	r2, #11
 8004718:	d917      	bls.n	800474a <_malloc_r+0xc2>
 800471a:	1961      	adds	r1, r4, r5
 800471c:	42a3      	cmp	r3, r4
 800471e:	6025      	str	r5, [r4, #0]
 8004720:	bf18      	it	ne
 8004722:	6059      	strne	r1, [r3, #4]
 8004724:	6863      	ldr	r3, [r4, #4]
 8004726:	bf08      	it	eq
 8004728:	f8c8 1000 	streq.w	r1, [r8]
 800472c:	5162      	str	r2, [r4, r5]
 800472e:	604b      	str	r3, [r1, #4]
 8004730:	4630      	mov	r0, r6
 8004732:	f000 f82f 	bl	8004794 <__malloc_unlock>
 8004736:	f104 000b 	add.w	r0, r4, #11
 800473a:	1d23      	adds	r3, r4, #4
 800473c:	f020 0007 	bic.w	r0, r0, #7
 8004740:	1ac2      	subs	r2, r0, r3
 8004742:	bf1c      	itt	ne
 8004744:	1a1b      	subne	r3, r3, r0
 8004746:	50a3      	strne	r3, [r4, r2]
 8004748:	e7af      	b.n	80046aa <_malloc_r+0x22>
 800474a:	6862      	ldr	r2, [r4, #4]
 800474c:	42a3      	cmp	r3, r4
 800474e:	bf0c      	ite	eq
 8004750:	f8c8 2000 	streq.w	r2, [r8]
 8004754:	605a      	strne	r2, [r3, #4]
 8004756:	e7eb      	b.n	8004730 <_malloc_r+0xa8>
 8004758:	4623      	mov	r3, r4
 800475a:	6864      	ldr	r4, [r4, #4]
 800475c:	e7ae      	b.n	80046bc <_malloc_r+0x34>
 800475e:	463c      	mov	r4, r7
 8004760:	687f      	ldr	r7, [r7, #4]
 8004762:	e7b6      	b.n	80046d2 <_malloc_r+0x4a>
 8004764:	461a      	mov	r2, r3
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	42a3      	cmp	r3, r4
 800476a:	d1fb      	bne.n	8004764 <_malloc_r+0xdc>
 800476c:	2300      	movs	r3, #0
 800476e:	6053      	str	r3, [r2, #4]
 8004770:	e7de      	b.n	8004730 <_malloc_r+0xa8>
 8004772:	230c      	movs	r3, #12
 8004774:	6033      	str	r3, [r6, #0]
 8004776:	4630      	mov	r0, r6
 8004778:	f000 f80c 	bl	8004794 <__malloc_unlock>
 800477c:	e794      	b.n	80046a8 <_malloc_r+0x20>
 800477e:	6005      	str	r5, [r0, #0]
 8004780:	e7d6      	b.n	8004730 <_malloc_r+0xa8>
 8004782:	bf00      	nop
 8004784:	200002b4 	.word	0x200002b4

08004788 <__malloc_lock>:
 8004788:	4801      	ldr	r0, [pc, #4]	@ (8004790 <__malloc_lock+0x8>)
 800478a:	f7ff bf0f 	b.w	80045ac <__retarget_lock_acquire_recursive>
 800478e:	bf00      	nop
 8004790:	200002ac 	.word	0x200002ac

08004794 <__malloc_unlock>:
 8004794:	4801      	ldr	r0, [pc, #4]	@ (800479c <__malloc_unlock+0x8>)
 8004796:	f7ff bf0a 	b.w	80045ae <__retarget_lock_release_recursive>
 800479a:	bf00      	nop
 800479c:	200002ac 	.word	0x200002ac

080047a0 <__ssputs_r>:
 80047a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	688e      	ldr	r6, [r1, #8]
 80047a6:	461f      	mov	r7, r3
 80047a8:	42be      	cmp	r6, r7
 80047aa:	680b      	ldr	r3, [r1, #0]
 80047ac:	4682      	mov	sl, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	4690      	mov	r8, r2
 80047b2:	d82d      	bhi.n	8004810 <__ssputs_r+0x70>
 80047b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80047bc:	d026      	beq.n	800480c <__ssputs_r+0x6c>
 80047be:	6965      	ldr	r5, [r4, #20]
 80047c0:	6909      	ldr	r1, [r1, #16]
 80047c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047c6:	eba3 0901 	sub.w	r9, r3, r1
 80047ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047ce:	1c7b      	adds	r3, r7, #1
 80047d0:	444b      	add	r3, r9
 80047d2:	106d      	asrs	r5, r5, #1
 80047d4:	429d      	cmp	r5, r3
 80047d6:	bf38      	it	cc
 80047d8:	461d      	movcc	r5, r3
 80047da:	0553      	lsls	r3, r2, #21
 80047dc:	d527      	bpl.n	800482e <__ssputs_r+0x8e>
 80047de:	4629      	mov	r1, r5
 80047e0:	f7ff ff52 	bl	8004688 <_malloc_r>
 80047e4:	4606      	mov	r6, r0
 80047e6:	b360      	cbz	r0, 8004842 <__ssputs_r+0xa2>
 80047e8:	6921      	ldr	r1, [r4, #16]
 80047ea:	464a      	mov	r2, r9
 80047ec:	f000 fae8 	bl	8004dc0 <memcpy>
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80047f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047fa:	81a3      	strh	r3, [r4, #12]
 80047fc:	6126      	str	r6, [r4, #16]
 80047fe:	6165      	str	r5, [r4, #20]
 8004800:	444e      	add	r6, r9
 8004802:	eba5 0509 	sub.w	r5, r5, r9
 8004806:	6026      	str	r6, [r4, #0]
 8004808:	60a5      	str	r5, [r4, #8]
 800480a:	463e      	mov	r6, r7
 800480c:	42be      	cmp	r6, r7
 800480e:	d900      	bls.n	8004812 <__ssputs_r+0x72>
 8004810:	463e      	mov	r6, r7
 8004812:	6820      	ldr	r0, [r4, #0]
 8004814:	4632      	mov	r2, r6
 8004816:	4641      	mov	r1, r8
 8004818:	f000 faa8 	bl	8004d6c <memmove>
 800481c:	68a3      	ldr	r3, [r4, #8]
 800481e:	1b9b      	subs	r3, r3, r6
 8004820:	60a3      	str	r3, [r4, #8]
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	4433      	add	r3, r6
 8004826:	6023      	str	r3, [r4, #0]
 8004828:	2000      	movs	r0, #0
 800482a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482e:	462a      	mov	r2, r5
 8004830:	f000 fad4 	bl	8004ddc <_realloc_r>
 8004834:	4606      	mov	r6, r0
 8004836:	2800      	cmp	r0, #0
 8004838:	d1e0      	bne.n	80047fc <__ssputs_r+0x5c>
 800483a:	6921      	ldr	r1, [r4, #16]
 800483c:	4650      	mov	r0, sl
 800483e:	f7ff feb7 	bl	80045b0 <_free_r>
 8004842:	230c      	movs	r3, #12
 8004844:	f8ca 3000 	str.w	r3, [sl]
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800484e:	81a3      	strh	r3, [r4, #12]
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	e7e9      	b.n	800482a <__ssputs_r+0x8a>
	...

08004858 <_svfiprintf_r>:
 8004858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485c:	4698      	mov	r8, r3
 800485e:	898b      	ldrh	r3, [r1, #12]
 8004860:	061b      	lsls	r3, r3, #24
 8004862:	b09d      	sub	sp, #116	@ 0x74
 8004864:	4607      	mov	r7, r0
 8004866:	460d      	mov	r5, r1
 8004868:	4614      	mov	r4, r2
 800486a:	d510      	bpl.n	800488e <_svfiprintf_r+0x36>
 800486c:	690b      	ldr	r3, [r1, #16]
 800486e:	b973      	cbnz	r3, 800488e <_svfiprintf_r+0x36>
 8004870:	2140      	movs	r1, #64	@ 0x40
 8004872:	f7ff ff09 	bl	8004688 <_malloc_r>
 8004876:	6028      	str	r0, [r5, #0]
 8004878:	6128      	str	r0, [r5, #16]
 800487a:	b930      	cbnz	r0, 800488a <_svfiprintf_r+0x32>
 800487c:	230c      	movs	r3, #12
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	b01d      	add	sp, #116	@ 0x74
 8004886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488a:	2340      	movs	r3, #64	@ 0x40
 800488c:	616b      	str	r3, [r5, #20]
 800488e:	2300      	movs	r3, #0
 8004890:	9309      	str	r3, [sp, #36]	@ 0x24
 8004892:	2320      	movs	r3, #32
 8004894:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004898:	f8cd 800c 	str.w	r8, [sp, #12]
 800489c:	2330      	movs	r3, #48	@ 0x30
 800489e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a3c <_svfiprintf_r+0x1e4>
 80048a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048a6:	f04f 0901 	mov.w	r9, #1
 80048aa:	4623      	mov	r3, r4
 80048ac:	469a      	mov	sl, r3
 80048ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048b2:	b10a      	cbz	r2, 80048b8 <_svfiprintf_r+0x60>
 80048b4:	2a25      	cmp	r2, #37	@ 0x25
 80048b6:	d1f9      	bne.n	80048ac <_svfiprintf_r+0x54>
 80048b8:	ebba 0b04 	subs.w	fp, sl, r4
 80048bc:	d00b      	beq.n	80048d6 <_svfiprintf_r+0x7e>
 80048be:	465b      	mov	r3, fp
 80048c0:	4622      	mov	r2, r4
 80048c2:	4629      	mov	r1, r5
 80048c4:	4638      	mov	r0, r7
 80048c6:	f7ff ff6b 	bl	80047a0 <__ssputs_r>
 80048ca:	3001      	adds	r0, #1
 80048cc:	f000 80a7 	beq.w	8004a1e <_svfiprintf_r+0x1c6>
 80048d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048d2:	445a      	add	r2, fp
 80048d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80048d6:	f89a 3000 	ldrb.w	r3, [sl]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 809f 	beq.w	8004a1e <_svfiprintf_r+0x1c6>
 80048e0:	2300      	movs	r3, #0
 80048e2:	f04f 32ff 	mov.w	r2, #4294967295
 80048e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ea:	f10a 0a01 	add.w	sl, sl, #1
 80048ee:	9304      	str	r3, [sp, #16]
 80048f0:	9307      	str	r3, [sp, #28]
 80048f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80048f8:	4654      	mov	r4, sl
 80048fa:	2205      	movs	r2, #5
 80048fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004900:	484e      	ldr	r0, [pc, #312]	@ (8004a3c <_svfiprintf_r+0x1e4>)
 8004902:	f7fb fc85 	bl	8000210 <memchr>
 8004906:	9a04      	ldr	r2, [sp, #16]
 8004908:	b9d8      	cbnz	r0, 8004942 <_svfiprintf_r+0xea>
 800490a:	06d0      	lsls	r0, r2, #27
 800490c:	bf44      	itt	mi
 800490e:	2320      	movmi	r3, #32
 8004910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004914:	0711      	lsls	r1, r2, #28
 8004916:	bf44      	itt	mi
 8004918:	232b      	movmi	r3, #43	@ 0x2b
 800491a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800491e:	f89a 3000 	ldrb.w	r3, [sl]
 8004922:	2b2a      	cmp	r3, #42	@ 0x2a
 8004924:	d015      	beq.n	8004952 <_svfiprintf_r+0xfa>
 8004926:	9a07      	ldr	r2, [sp, #28]
 8004928:	4654      	mov	r4, sl
 800492a:	2000      	movs	r0, #0
 800492c:	f04f 0c0a 	mov.w	ip, #10
 8004930:	4621      	mov	r1, r4
 8004932:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004936:	3b30      	subs	r3, #48	@ 0x30
 8004938:	2b09      	cmp	r3, #9
 800493a:	d94b      	bls.n	80049d4 <_svfiprintf_r+0x17c>
 800493c:	b1b0      	cbz	r0, 800496c <_svfiprintf_r+0x114>
 800493e:	9207      	str	r2, [sp, #28]
 8004940:	e014      	b.n	800496c <_svfiprintf_r+0x114>
 8004942:	eba0 0308 	sub.w	r3, r0, r8
 8004946:	fa09 f303 	lsl.w	r3, r9, r3
 800494a:	4313      	orrs	r3, r2
 800494c:	9304      	str	r3, [sp, #16]
 800494e:	46a2      	mov	sl, r4
 8004950:	e7d2      	b.n	80048f8 <_svfiprintf_r+0xa0>
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	1d19      	adds	r1, r3, #4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	9103      	str	r1, [sp, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	bfbb      	ittet	lt
 800495e:	425b      	neglt	r3, r3
 8004960:	f042 0202 	orrlt.w	r2, r2, #2
 8004964:	9307      	strge	r3, [sp, #28]
 8004966:	9307      	strlt	r3, [sp, #28]
 8004968:	bfb8      	it	lt
 800496a:	9204      	strlt	r2, [sp, #16]
 800496c:	7823      	ldrb	r3, [r4, #0]
 800496e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004970:	d10a      	bne.n	8004988 <_svfiprintf_r+0x130>
 8004972:	7863      	ldrb	r3, [r4, #1]
 8004974:	2b2a      	cmp	r3, #42	@ 0x2a
 8004976:	d132      	bne.n	80049de <_svfiprintf_r+0x186>
 8004978:	9b03      	ldr	r3, [sp, #12]
 800497a:	1d1a      	adds	r2, r3, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	9203      	str	r2, [sp, #12]
 8004980:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004984:	3402      	adds	r4, #2
 8004986:	9305      	str	r3, [sp, #20]
 8004988:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a4c <_svfiprintf_r+0x1f4>
 800498c:	7821      	ldrb	r1, [r4, #0]
 800498e:	2203      	movs	r2, #3
 8004990:	4650      	mov	r0, sl
 8004992:	f7fb fc3d 	bl	8000210 <memchr>
 8004996:	b138      	cbz	r0, 80049a8 <_svfiprintf_r+0x150>
 8004998:	9b04      	ldr	r3, [sp, #16]
 800499a:	eba0 000a 	sub.w	r0, r0, sl
 800499e:	2240      	movs	r2, #64	@ 0x40
 80049a0:	4082      	lsls	r2, r0
 80049a2:	4313      	orrs	r3, r2
 80049a4:	3401      	adds	r4, #1
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ac:	4824      	ldr	r0, [pc, #144]	@ (8004a40 <_svfiprintf_r+0x1e8>)
 80049ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049b2:	2206      	movs	r2, #6
 80049b4:	f7fb fc2c 	bl	8000210 <memchr>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d036      	beq.n	8004a2a <_svfiprintf_r+0x1d2>
 80049bc:	4b21      	ldr	r3, [pc, #132]	@ (8004a44 <_svfiprintf_r+0x1ec>)
 80049be:	bb1b      	cbnz	r3, 8004a08 <_svfiprintf_r+0x1b0>
 80049c0:	9b03      	ldr	r3, [sp, #12]
 80049c2:	3307      	adds	r3, #7
 80049c4:	f023 0307 	bic.w	r3, r3, #7
 80049c8:	3308      	adds	r3, #8
 80049ca:	9303      	str	r3, [sp, #12]
 80049cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049ce:	4433      	add	r3, r6
 80049d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d2:	e76a      	b.n	80048aa <_svfiprintf_r+0x52>
 80049d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80049d8:	460c      	mov	r4, r1
 80049da:	2001      	movs	r0, #1
 80049dc:	e7a8      	b.n	8004930 <_svfiprintf_r+0xd8>
 80049de:	2300      	movs	r3, #0
 80049e0:	3401      	adds	r4, #1
 80049e2:	9305      	str	r3, [sp, #20]
 80049e4:	4619      	mov	r1, r3
 80049e6:	f04f 0c0a 	mov.w	ip, #10
 80049ea:	4620      	mov	r0, r4
 80049ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049f0:	3a30      	subs	r2, #48	@ 0x30
 80049f2:	2a09      	cmp	r2, #9
 80049f4:	d903      	bls.n	80049fe <_svfiprintf_r+0x1a6>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0c6      	beq.n	8004988 <_svfiprintf_r+0x130>
 80049fa:	9105      	str	r1, [sp, #20]
 80049fc:	e7c4      	b.n	8004988 <_svfiprintf_r+0x130>
 80049fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a02:	4604      	mov	r4, r0
 8004a04:	2301      	movs	r3, #1
 8004a06:	e7f0      	b.n	80049ea <_svfiprintf_r+0x192>
 8004a08:	ab03      	add	r3, sp, #12
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	462a      	mov	r2, r5
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a48 <_svfiprintf_r+0x1f0>)
 8004a10:	a904      	add	r1, sp, #16
 8004a12:	4638      	mov	r0, r7
 8004a14:	f3af 8000 	nop.w
 8004a18:	1c42      	adds	r2, r0, #1
 8004a1a:	4606      	mov	r6, r0
 8004a1c:	d1d6      	bne.n	80049cc <_svfiprintf_r+0x174>
 8004a1e:	89ab      	ldrh	r3, [r5, #12]
 8004a20:	065b      	lsls	r3, r3, #25
 8004a22:	f53f af2d 	bmi.w	8004880 <_svfiprintf_r+0x28>
 8004a26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a28:	e72c      	b.n	8004884 <_svfiprintf_r+0x2c>
 8004a2a:	ab03      	add	r3, sp, #12
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	462a      	mov	r2, r5
 8004a30:	4b05      	ldr	r3, [pc, #20]	@ (8004a48 <_svfiprintf_r+0x1f0>)
 8004a32:	a904      	add	r1, sp, #16
 8004a34:	4638      	mov	r0, r7
 8004a36:	f000 f879 	bl	8004b2c <_printf_i>
 8004a3a:	e7ed      	b.n	8004a18 <_svfiprintf_r+0x1c0>
 8004a3c:	08004e98 	.word	0x08004e98
 8004a40:	08004ea2 	.word	0x08004ea2
 8004a44:	00000000 	.word	0x00000000
 8004a48:	080047a1 	.word	0x080047a1
 8004a4c:	08004e9e 	.word	0x08004e9e

08004a50 <_printf_common>:
 8004a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	4616      	mov	r6, r2
 8004a56:	4698      	mov	r8, r3
 8004a58:	688a      	ldr	r2, [r1, #8]
 8004a5a:	690b      	ldr	r3, [r1, #16]
 8004a5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a60:	4293      	cmp	r3, r2
 8004a62:	bfb8      	it	lt
 8004a64:	4613      	movlt	r3, r2
 8004a66:	6033      	str	r3, [r6, #0]
 8004a68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	b10a      	cbz	r2, 8004a76 <_printf_common+0x26>
 8004a72:	3301      	adds	r3, #1
 8004a74:	6033      	str	r3, [r6, #0]
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	0699      	lsls	r1, r3, #26
 8004a7a:	bf42      	ittt	mi
 8004a7c:	6833      	ldrmi	r3, [r6, #0]
 8004a7e:	3302      	addmi	r3, #2
 8004a80:	6033      	strmi	r3, [r6, #0]
 8004a82:	6825      	ldr	r5, [r4, #0]
 8004a84:	f015 0506 	ands.w	r5, r5, #6
 8004a88:	d106      	bne.n	8004a98 <_printf_common+0x48>
 8004a8a:	f104 0a19 	add.w	sl, r4, #25
 8004a8e:	68e3      	ldr	r3, [r4, #12]
 8004a90:	6832      	ldr	r2, [r6, #0]
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	42ab      	cmp	r3, r5
 8004a96:	dc26      	bgt.n	8004ae6 <_printf_common+0x96>
 8004a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	3b00      	subs	r3, #0
 8004aa0:	bf18      	it	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	0692      	lsls	r2, r2, #26
 8004aa6:	d42b      	bmi.n	8004b00 <_printf_common+0xb0>
 8004aa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004aac:	4641      	mov	r1, r8
 8004aae:	4638      	mov	r0, r7
 8004ab0:	47c8      	blx	r9
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d01e      	beq.n	8004af4 <_printf_common+0xa4>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	6922      	ldr	r2, [r4, #16]
 8004aba:	f003 0306 	and.w	r3, r3, #6
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	bf02      	ittt	eq
 8004ac2:	68e5      	ldreq	r5, [r4, #12]
 8004ac4:	6833      	ldreq	r3, [r6, #0]
 8004ac6:	1aed      	subeq	r5, r5, r3
 8004ac8:	68a3      	ldr	r3, [r4, #8]
 8004aca:	bf0c      	ite	eq
 8004acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ad0:	2500      	movne	r5, #0
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	bfc4      	itt	gt
 8004ad6:	1a9b      	subgt	r3, r3, r2
 8004ad8:	18ed      	addgt	r5, r5, r3
 8004ada:	2600      	movs	r6, #0
 8004adc:	341a      	adds	r4, #26
 8004ade:	42b5      	cmp	r5, r6
 8004ae0:	d11a      	bne.n	8004b18 <_printf_common+0xc8>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e008      	b.n	8004af8 <_printf_common+0xa8>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4652      	mov	r2, sl
 8004aea:	4641      	mov	r1, r8
 8004aec:	4638      	mov	r0, r7
 8004aee:	47c8      	blx	r9
 8004af0:	3001      	adds	r0, #1
 8004af2:	d103      	bne.n	8004afc <_printf_common+0xac>
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afc:	3501      	adds	r5, #1
 8004afe:	e7c6      	b.n	8004a8e <_printf_common+0x3e>
 8004b00:	18e1      	adds	r1, r4, r3
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	2030      	movs	r0, #48	@ 0x30
 8004b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b0a:	4422      	add	r2, r4
 8004b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b14:	3302      	adds	r3, #2
 8004b16:	e7c7      	b.n	8004aa8 <_printf_common+0x58>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	4638      	mov	r0, r7
 8004b20:	47c8      	blx	r9
 8004b22:	3001      	adds	r0, #1
 8004b24:	d0e6      	beq.n	8004af4 <_printf_common+0xa4>
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7d9      	b.n	8004ade <_printf_common+0x8e>
	...

08004b2c <_printf_i>:
 8004b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	7e0f      	ldrb	r7, [r1, #24]
 8004b32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b34:	2f78      	cmp	r7, #120	@ 0x78
 8004b36:	4691      	mov	r9, r2
 8004b38:	4680      	mov	r8, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	469a      	mov	sl, r3
 8004b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b42:	d807      	bhi.n	8004b54 <_printf_i+0x28>
 8004b44:	2f62      	cmp	r7, #98	@ 0x62
 8004b46:	d80a      	bhi.n	8004b5e <_printf_i+0x32>
 8004b48:	2f00      	cmp	r7, #0
 8004b4a:	f000 80d2 	beq.w	8004cf2 <_printf_i+0x1c6>
 8004b4e:	2f58      	cmp	r7, #88	@ 0x58
 8004b50:	f000 80b9 	beq.w	8004cc6 <_printf_i+0x19a>
 8004b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b5c:	e03a      	b.n	8004bd4 <_printf_i+0xa8>
 8004b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b62:	2b15      	cmp	r3, #21
 8004b64:	d8f6      	bhi.n	8004b54 <_printf_i+0x28>
 8004b66:	a101      	add	r1, pc, #4	@ (adr r1, 8004b6c <_printf_i+0x40>)
 8004b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b6c:	08004bc5 	.word	0x08004bc5
 8004b70:	08004bd9 	.word	0x08004bd9
 8004b74:	08004b55 	.word	0x08004b55
 8004b78:	08004b55 	.word	0x08004b55
 8004b7c:	08004b55 	.word	0x08004b55
 8004b80:	08004b55 	.word	0x08004b55
 8004b84:	08004bd9 	.word	0x08004bd9
 8004b88:	08004b55 	.word	0x08004b55
 8004b8c:	08004b55 	.word	0x08004b55
 8004b90:	08004b55 	.word	0x08004b55
 8004b94:	08004b55 	.word	0x08004b55
 8004b98:	08004cd9 	.word	0x08004cd9
 8004b9c:	08004c03 	.word	0x08004c03
 8004ba0:	08004c93 	.word	0x08004c93
 8004ba4:	08004b55 	.word	0x08004b55
 8004ba8:	08004b55 	.word	0x08004b55
 8004bac:	08004cfb 	.word	0x08004cfb
 8004bb0:	08004b55 	.word	0x08004b55
 8004bb4:	08004c03 	.word	0x08004c03
 8004bb8:	08004b55 	.word	0x08004b55
 8004bbc:	08004b55 	.word	0x08004b55
 8004bc0:	08004c9b 	.word	0x08004c9b
 8004bc4:	6833      	ldr	r3, [r6, #0]
 8004bc6:	1d1a      	adds	r2, r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6032      	str	r2, [r6, #0]
 8004bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e09d      	b.n	8004d14 <_printf_i+0x1e8>
 8004bd8:	6833      	ldr	r3, [r6, #0]
 8004bda:	6820      	ldr	r0, [r4, #0]
 8004bdc:	1d19      	adds	r1, r3, #4
 8004bde:	6031      	str	r1, [r6, #0]
 8004be0:	0606      	lsls	r6, r0, #24
 8004be2:	d501      	bpl.n	8004be8 <_printf_i+0xbc>
 8004be4:	681d      	ldr	r5, [r3, #0]
 8004be6:	e003      	b.n	8004bf0 <_printf_i+0xc4>
 8004be8:	0645      	lsls	r5, r0, #25
 8004bea:	d5fb      	bpl.n	8004be4 <_printf_i+0xb8>
 8004bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bf0:	2d00      	cmp	r5, #0
 8004bf2:	da03      	bge.n	8004bfc <_printf_i+0xd0>
 8004bf4:	232d      	movs	r3, #45	@ 0x2d
 8004bf6:	426d      	negs	r5, r5
 8004bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bfc:	4859      	ldr	r0, [pc, #356]	@ (8004d64 <_printf_i+0x238>)
 8004bfe:	230a      	movs	r3, #10
 8004c00:	e011      	b.n	8004c26 <_printf_i+0xfa>
 8004c02:	6821      	ldr	r1, [r4, #0]
 8004c04:	6833      	ldr	r3, [r6, #0]
 8004c06:	0608      	lsls	r0, r1, #24
 8004c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c0c:	d402      	bmi.n	8004c14 <_printf_i+0xe8>
 8004c0e:	0649      	lsls	r1, r1, #25
 8004c10:	bf48      	it	mi
 8004c12:	b2ad      	uxthmi	r5, r5
 8004c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c16:	4853      	ldr	r0, [pc, #332]	@ (8004d64 <_printf_i+0x238>)
 8004c18:	6033      	str	r3, [r6, #0]
 8004c1a:	bf14      	ite	ne
 8004c1c:	230a      	movne	r3, #10
 8004c1e:	2308      	moveq	r3, #8
 8004c20:	2100      	movs	r1, #0
 8004c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c26:	6866      	ldr	r6, [r4, #4]
 8004c28:	60a6      	str	r6, [r4, #8]
 8004c2a:	2e00      	cmp	r6, #0
 8004c2c:	bfa2      	ittt	ge
 8004c2e:	6821      	ldrge	r1, [r4, #0]
 8004c30:	f021 0104 	bicge.w	r1, r1, #4
 8004c34:	6021      	strge	r1, [r4, #0]
 8004c36:	b90d      	cbnz	r5, 8004c3c <_printf_i+0x110>
 8004c38:	2e00      	cmp	r6, #0
 8004c3a:	d04b      	beq.n	8004cd4 <_printf_i+0x1a8>
 8004c3c:	4616      	mov	r6, r2
 8004c3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c42:	fb03 5711 	mls	r7, r3, r1, r5
 8004c46:	5dc7      	ldrb	r7, [r0, r7]
 8004c48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c4c:	462f      	mov	r7, r5
 8004c4e:	42bb      	cmp	r3, r7
 8004c50:	460d      	mov	r5, r1
 8004c52:	d9f4      	bls.n	8004c3e <_printf_i+0x112>
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d10b      	bne.n	8004c70 <_printf_i+0x144>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	07df      	lsls	r7, r3, #31
 8004c5c:	d508      	bpl.n	8004c70 <_printf_i+0x144>
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	6861      	ldr	r1, [r4, #4]
 8004c62:	4299      	cmp	r1, r3
 8004c64:	bfde      	ittt	le
 8004c66:	2330      	movle	r3, #48	@ 0x30
 8004c68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c70:	1b92      	subs	r2, r2, r6
 8004c72:	6122      	str	r2, [r4, #16]
 8004c74:	f8cd a000 	str.w	sl, [sp]
 8004c78:	464b      	mov	r3, r9
 8004c7a:	aa03      	add	r2, sp, #12
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4640      	mov	r0, r8
 8004c80:	f7ff fee6 	bl	8004a50 <_printf_common>
 8004c84:	3001      	adds	r0, #1
 8004c86:	d14a      	bne.n	8004d1e <_printf_i+0x1f2>
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	b004      	add	sp, #16
 8004c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	f043 0320 	orr.w	r3, r3, #32
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	4833      	ldr	r0, [pc, #204]	@ (8004d68 <_printf_i+0x23c>)
 8004c9c:	2778      	movs	r7, #120	@ 0x78
 8004c9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	6831      	ldr	r1, [r6, #0]
 8004ca6:	061f      	lsls	r7, r3, #24
 8004ca8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cac:	d402      	bmi.n	8004cb4 <_printf_i+0x188>
 8004cae:	065f      	lsls	r7, r3, #25
 8004cb0:	bf48      	it	mi
 8004cb2:	b2ad      	uxthmi	r5, r5
 8004cb4:	6031      	str	r1, [r6, #0]
 8004cb6:	07d9      	lsls	r1, r3, #31
 8004cb8:	bf44      	itt	mi
 8004cba:	f043 0320 	orrmi.w	r3, r3, #32
 8004cbe:	6023      	strmi	r3, [r4, #0]
 8004cc0:	b11d      	cbz	r5, 8004cca <_printf_i+0x19e>
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	e7ac      	b.n	8004c20 <_printf_i+0xf4>
 8004cc6:	4827      	ldr	r0, [pc, #156]	@ (8004d64 <_printf_i+0x238>)
 8004cc8:	e7e9      	b.n	8004c9e <_printf_i+0x172>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	f023 0320 	bic.w	r3, r3, #32
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	e7f6      	b.n	8004cc2 <_printf_i+0x196>
 8004cd4:	4616      	mov	r6, r2
 8004cd6:	e7bd      	b.n	8004c54 <_printf_i+0x128>
 8004cd8:	6833      	ldr	r3, [r6, #0]
 8004cda:	6825      	ldr	r5, [r4, #0]
 8004cdc:	6961      	ldr	r1, [r4, #20]
 8004cde:	1d18      	adds	r0, r3, #4
 8004ce0:	6030      	str	r0, [r6, #0]
 8004ce2:	062e      	lsls	r6, r5, #24
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	d501      	bpl.n	8004cec <_printf_i+0x1c0>
 8004ce8:	6019      	str	r1, [r3, #0]
 8004cea:	e002      	b.n	8004cf2 <_printf_i+0x1c6>
 8004cec:	0668      	lsls	r0, r5, #25
 8004cee:	d5fb      	bpl.n	8004ce8 <_printf_i+0x1bc>
 8004cf0:	8019      	strh	r1, [r3, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6123      	str	r3, [r4, #16]
 8004cf6:	4616      	mov	r6, r2
 8004cf8:	e7bc      	b.n	8004c74 <_printf_i+0x148>
 8004cfa:	6833      	ldr	r3, [r6, #0]
 8004cfc:	1d1a      	adds	r2, r3, #4
 8004cfe:	6032      	str	r2, [r6, #0]
 8004d00:	681e      	ldr	r6, [r3, #0]
 8004d02:	6862      	ldr	r2, [r4, #4]
 8004d04:	2100      	movs	r1, #0
 8004d06:	4630      	mov	r0, r6
 8004d08:	f7fb fa82 	bl	8000210 <memchr>
 8004d0c:	b108      	cbz	r0, 8004d12 <_printf_i+0x1e6>
 8004d0e:	1b80      	subs	r0, r0, r6
 8004d10:	6060      	str	r0, [r4, #4]
 8004d12:	6863      	ldr	r3, [r4, #4]
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	2300      	movs	r3, #0
 8004d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d1c:	e7aa      	b.n	8004c74 <_printf_i+0x148>
 8004d1e:	6923      	ldr	r3, [r4, #16]
 8004d20:	4632      	mov	r2, r6
 8004d22:	4649      	mov	r1, r9
 8004d24:	4640      	mov	r0, r8
 8004d26:	47d0      	blx	sl
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d0ad      	beq.n	8004c88 <_printf_i+0x15c>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	079b      	lsls	r3, r3, #30
 8004d30:	d413      	bmi.n	8004d5a <_printf_i+0x22e>
 8004d32:	68e0      	ldr	r0, [r4, #12]
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	4298      	cmp	r0, r3
 8004d38:	bfb8      	it	lt
 8004d3a:	4618      	movlt	r0, r3
 8004d3c:	e7a6      	b.n	8004c8c <_printf_i+0x160>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	4632      	mov	r2, r6
 8004d42:	4649      	mov	r1, r9
 8004d44:	4640      	mov	r0, r8
 8004d46:	47d0      	blx	sl
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d09d      	beq.n	8004c88 <_printf_i+0x15c>
 8004d4c:	3501      	adds	r5, #1
 8004d4e:	68e3      	ldr	r3, [r4, #12]
 8004d50:	9903      	ldr	r1, [sp, #12]
 8004d52:	1a5b      	subs	r3, r3, r1
 8004d54:	42ab      	cmp	r3, r5
 8004d56:	dcf2      	bgt.n	8004d3e <_printf_i+0x212>
 8004d58:	e7eb      	b.n	8004d32 <_printf_i+0x206>
 8004d5a:	2500      	movs	r5, #0
 8004d5c:	f104 0619 	add.w	r6, r4, #25
 8004d60:	e7f5      	b.n	8004d4e <_printf_i+0x222>
 8004d62:	bf00      	nop
 8004d64:	08004ea9 	.word	0x08004ea9
 8004d68:	08004eba 	.word	0x08004eba

08004d6c <memmove>:
 8004d6c:	4288      	cmp	r0, r1
 8004d6e:	b510      	push	{r4, lr}
 8004d70:	eb01 0402 	add.w	r4, r1, r2
 8004d74:	d902      	bls.n	8004d7c <memmove+0x10>
 8004d76:	4284      	cmp	r4, r0
 8004d78:	4623      	mov	r3, r4
 8004d7a:	d807      	bhi.n	8004d8c <memmove+0x20>
 8004d7c:	1e43      	subs	r3, r0, #1
 8004d7e:	42a1      	cmp	r1, r4
 8004d80:	d008      	beq.n	8004d94 <memmove+0x28>
 8004d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d8a:	e7f8      	b.n	8004d7e <memmove+0x12>
 8004d8c:	4402      	add	r2, r0
 8004d8e:	4601      	mov	r1, r0
 8004d90:	428a      	cmp	r2, r1
 8004d92:	d100      	bne.n	8004d96 <memmove+0x2a>
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d9e:	e7f7      	b.n	8004d90 <memmove+0x24>

08004da0 <_sbrk_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4d06      	ldr	r5, [pc, #24]	@ (8004dbc <_sbrk_r+0x1c>)
 8004da4:	2300      	movs	r3, #0
 8004da6:	4604      	mov	r4, r0
 8004da8:	4608      	mov	r0, r1
 8004daa:	602b      	str	r3, [r5, #0]
 8004dac:	f7fc fcd4 	bl	8001758 <_sbrk>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d102      	bne.n	8004dba <_sbrk_r+0x1a>
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	b103      	cbz	r3, 8004dba <_sbrk_r+0x1a>
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	200002a8 	.word	0x200002a8

08004dc0 <memcpy>:
 8004dc0:	440a      	add	r2, r1
 8004dc2:	4291      	cmp	r1, r2
 8004dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dc8:	d100      	bne.n	8004dcc <memcpy+0xc>
 8004dca:	4770      	bx	lr
 8004dcc:	b510      	push	{r4, lr}
 8004dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dd6:	4291      	cmp	r1, r2
 8004dd8:	d1f9      	bne.n	8004dce <memcpy+0xe>
 8004dda:	bd10      	pop	{r4, pc}

08004ddc <_realloc_r>:
 8004ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de0:	4680      	mov	r8, r0
 8004de2:	4615      	mov	r5, r2
 8004de4:	460c      	mov	r4, r1
 8004de6:	b921      	cbnz	r1, 8004df2 <_realloc_r+0x16>
 8004de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dec:	4611      	mov	r1, r2
 8004dee:	f7ff bc4b 	b.w	8004688 <_malloc_r>
 8004df2:	b92a      	cbnz	r2, 8004e00 <_realloc_r+0x24>
 8004df4:	f7ff fbdc 	bl	80045b0 <_free_r>
 8004df8:	2400      	movs	r4, #0
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e00:	f000 f81a 	bl	8004e38 <_malloc_usable_size_r>
 8004e04:	4285      	cmp	r5, r0
 8004e06:	4606      	mov	r6, r0
 8004e08:	d802      	bhi.n	8004e10 <_realloc_r+0x34>
 8004e0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e0e:	d8f4      	bhi.n	8004dfa <_realloc_r+0x1e>
 8004e10:	4629      	mov	r1, r5
 8004e12:	4640      	mov	r0, r8
 8004e14:	f7ff fc38 	bl	8004688 <_malloc_r>
 8004e18:	4607      	mov	r7, r0
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d0ec      	beq.n	8004df8 <_realloc_r+0x1c>
 8004e1e:	42b5      	cmp	r5, r6
 8004e20:	462a      	mov	r2, r5
 8004e22:	4621      	mov	r1, r4
 8004e24:	bf28      	it	cs
 8004e26:	4632      	movcs	r2, r6
 8004e28:	f7ff ffca 	bl	8004dc0 <memcpy>
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	4640      	mov	r0, r8
 8004e30:	f7ff fbbe 	bl	80045b0 <_free_r>
 8004e34:	463c      	mov	r4, r7
 8004e36:	e7e0      	b.n	8004dfa <_realloc_r+0x1e>

08004e38 <_malloc_usable_size_r>:
 8004e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e3c:	1f18      	subs	r0, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bfbc      	itt	lt
 8004e42:	580b      	ldrlt	r3, [r1, r0]
 8004e44:	18c0      	addlt	r0, r0, r3
 8004e46:	4770      	bx	lr

08004e48 <_init>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	bf00      	nop
 8004e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4e:	bc08      	pop	{r3}
 8004e50:	469e      	mov	lr, r3
 8004e52:	4770      	bx	lr

08004e54 <_fini>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	bf00      	nop
 8004e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5a:	bc08      	pop	{r3}
 8004e5c:	469e      	mov	lr, r3
 8004e5e:	4770      	bx	lr
